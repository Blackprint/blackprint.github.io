{"version":3,"sources":["init.js","js/mobile.js","js/register-handler.js","js/sample.js","js/transition.js","nodes/button.js","nodes/input.js","nodes/logger.js","vw-ground/router.js","vw-ground/blackprint/header.js","end.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpzNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/CA;AACA","file":"myjs.min.js","sourcesContent":["// Wrap all .js scripts until _z_end.js\r\n// This will run after all script was loaded\r\n$(function(){\r\n\r\n// Blackprint.space = Namespace (https://github.com/ScarletsFiction/ScarletsFrame/wiki/Namespace)\r\n// sketch.scope = shortcut to obtain your model scope/context\r\n\r\nvar sketch = window.sketch = new Blackprint.Sketch();\r\nsketch.settings('visualizeFlow', true);","var hasTouchScreen = false;\r\nif (navigator.maxTouchPoints !== void 0)\r\n    hasTouchScreen = navigator.maxTouchPoints > 0;\r\nelse if (navigator.msMaxTouchPoints !== void 0)\r\n    hasTouchScreen = navigator.msMaxTouchPoints > 0;\r\nelse {\r\n    var mQ = window.matchMedia && matchMedia(\"(pointer:coarse)\");\r\n    if (mQ && mQ.media === \"(pointer:coarse)\")\r\n        hasTouchScreen = !!mQ.matches;\r\n    else {\r\n        // Fall back to user agent sniffing\r\n        var UA = navigator.userAgent;\r\n        hasTouchScreen = (\r\n            /\\b(BlackBerry|webOS|iPhone|IEMobile)\\b/i.test(UA) ||\r\n            /\\b(Android|Windows Phone|iPad|iPod)\\b/i.test(UA)\r\n        );\r\n    }\r\n}\r\n\r\nif(hasTouchScreen)\r\n\t$(document.body).addClass('disable-effect');","sketch.registerNode('math/multiply', function(handle, node){\r\n\tnode.title = \"Multiply\";\r\n\t// Let's use default node interface\r\n\r\n\t// Handle all output port here\r\n\thandle.outputs = {\r\n\t\tResult:Number,\r\n\t};\r\n\r\n\t// Handle all input port here\r\n\tvar inputs = handle.inputs = {\r\n\t\tExec: function(){\r\n\t\t\thandle.outputs.Result = multiply();\r\n\t\t\tconsole.log(\"Result has been set:\", handle.outputs.Result);\r\n\t\t},\r\n\t\tA: Number,\r\n\t\tB: Blackprint.PortValidator(Number, function(val){\r\n\t\t\t// Executed when inputs.B is being obtained\r\n\t\t\t// And the output from other node is being assigned\r\n\t\t\t// as current port value in this node\r\n\t\t\tconsole.log(node.title, '- Port B got input:', val);\r\n\t\t\treturn Number(val);\r\n\t\t}),\r\n\t};\r\n\r\n\t// Your own processing mechanism\r\n\tfunction multiply(){\r\n\t\tconsole.log('Multiplying', inputs.A, 'with', inputs.B);\r\n\t\treturn inputs.A * inputs.B;\r\n\t}\r\n\r\n\t// When any output value from other node are updated\r\n\t// Let's immediately change current node result\r\n\thandle.update = function(cable){\r\n\t\thandle.outputs.Result = multiply();\r\n\t}\r\n\r\n\t// Event listener can only be registered after handle init\r\n\thandle.init = function(){\r\n\t\tnode.on('cable.connect', function(cable){\r\n\t\t\tconsole.log(`Cable connected from ${cable.owner.node.title} (${cable.owner.name}) to ${cable.target.node.title} (${cable.target.name})`);\r\n\t\t});\r\n\t}\r\n\r\n\t// If you want to test it or play around from the browser console\r\n\tsetTimeout(function(){\r\n\t\tif(node.x === void 0)\r\n\t\t\tconsole.log('Node from Interpreter:', node);\r\n\t\telse\r\n\t\t\tconsole.log('Node from Sketch:', node);\r\n\t}, 10);\r\n});\r\n\r\nsketch.registerNode('math/random', function(handle, node){\r\n\tnode.title = \"Random\";\r\n\tnode.description = \"Number (0-100)\";\r\n\r\n\t// Let's use default node interface\r\n\r\n\thandle.outputs = {\r\n\t\tOut:Number\r\n\t};\r\n\r\n\tvar executed = false;\r\n\thandle.inputs = {\r\n\t\t'Re-seed':function(){\r\n\t\t\texecuted = true;\r\n\t\t\thandle.outputs.Out = Math.round(Math.random()*100);\r\n\t\t}\r\n\t};\r\n\r\n\t// When the connected node is requesting for the output value\r\n\thandle.request = function(port, node){\r\n\t\t// Only run once this node never been executed\r\n\t\t// Return false if no value was changed\r\n\t\tif(executed === true)\r\n\t\t\treturn false;\r\n\r\n\t\tconsole.warn('Value request for port:', port.name, \"from node:\", node.title);\r\n\r\n\t\t// Let's create the value for him\r\n\t\thandle.inputs['Re-seed']();\r\n\t}\r\n});\r\n\r\nsketch.registerNode('display/logger', function(handle, node){\r\n\tnode.title = \"Logger\";\r\n\tnode.description = 'Print anything into text';\r\n\r\n\t// Let's use ../nodes/logger.js\r\n\tnode.type = 'logger';\r\n\r\n\thandle.inputs = {\r\n\t\tAny: Blackprint.PortListener(function(port, val){\r\n\t\t\tconsole.log(\"I connected to\", port.name, \"port from\", port.node.title, \"that have new value:\", val);\r\n\r\n\t\t\t// Let's take all data from all connected nodes\r\n\t\t\t// Instead showing new single data-> val\r\n\t\t\trefreshLogger(handle.inputs.Any);\r\n\t\t})\r\n\t};\r\n\r\n\tfunction refreshLogger(val){\r\n\t\tif(val === null)\r\n\t\t\tnode.log = 'null';\r\n\t\telse if(val === void 0)\r\n\t\t\tnode.log = 'undefined';\r\n\t\telse if(val.constructor === Function)\r\n\t\t\tnode.log = val.toString();\r\n\t\telse if(val.constructor === String || val.constructor === Number)\r\n\t\t\tnode.log = val;\r\n\t\telse\r\n\t\t\tnode.log = JSON.stringify(val);\r\n\t}\r\n\r\n\thandle.init = function(){\r\n\t\t// Let's show data after new cable was connected or disconnected\r\n\t\tnode.on('cable.connect cable.disconnect', function(){\r\n\t\t\tconsole.log(\"A cable was changed on Logger, now refresing the input element\");\r\n\t\t\trefreshLogger(handle.inputs.Any);\r\n\t\t});\r\n\t}\r\n});\r\n\r\nsketch.registerNode('button/simple', function(handle, node){\r\n\t// node = under ScarletsFrame element control\r\n\tnode.title = \"Button\";\r\n\r\n\t// Let's use ../nodes/button.js\r\n\tnode.type = 'button';\r\n\r\n\t// handle = under Blackprint node flow control\r\n\thandle.outputs = {\r\n\t\tClicked:Function\r\n\t};\r\n\r\n\t// Proxy event object from: node.clicked -> handle.clicked -> outputs.Clicked\r\n\thandle.clicked = function(ev){\r\n\t\tconsole.log('button/simple: got', ev, \"time to trigger to the other node\");\r\n\t\thandle.outputs.Clicked(ev);\r\n\t}\r\n});\r\n\r\nsketch.registerNode('input/simple', function(handle, node){\r\n\t// node = under ScarletsFrame element control\r\n\tnode.title = \"Input\";\r\n\r\n\t// Let's use ../nodes/input.js\r\n\tnode.type = 'input';\r\n\r\n\t// handle = under Blackprint node flow control\r\n\thandle.outputs = {\r\n\t\tChanged:Function,\r\n\t\tValue:'', // Default to empty string\r\n\t};\r\n\r\n\t// Bring value from imported node to handle output\r\n\thandle.imported = function(){\r\n\t\tif(node.options.value)\r\n\t\t\tconsole.warn(\"Saved options as outputs:\", node.options.value);\r\n\r\n\t\thandle.outputs.Value = node.options.value;\r\n\t}\r\n\r\n\t// Proxy string value from: node.changed -> handle.changed -> outputs.Value\r\n\t// And also call outputs.Changed() if connected to other node\r\n\thandle.changed = function(text, ev){\r\n\t\t// This node still being imported\r\n\t\tif(node.importing !== false)\r\n\t\t\treturn;\r\n\r\n\t\tconsole.log('The input box have new value:', text);\r\n\r\n\t\t// node.options.value === text;\r\n\t\thandle.outputs.Value = node.options.value;\r\n\r\n\t\t// This will call every connected node\r\n\t\thandle.outputs.Changed();\r\n\t}\r\n});\r\n\r\nsketch.registerNode('sketch/export', function(handle, node){\r\n\t// node = under ScarletsFrame element control\r\n\tnode.title = \"Blackprint Export\";\r\n\r\n\t// Let's use ../nodes/logger.js\r\n\tnode.type = 'logger';\r\n\r\n\t// handle = under Blackprint node flow control\r\n\thandle.inputs = {\r\n\t\texport:function(){\r\n\t\t\tnode.log = sketch.exportJSON({\r\n\t\t\t\texclude:['sketch/export']\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n});\r\n\r\n// Does nothing :3\r\nsketch.registerNode('dummy/test', function(handle, node){\r\n\tnode.title = \"Do nothing\";\r\n\r\n\t// PortName must different any port\r\n\thandle.inputs = {\r\n\t\t\"Input 1\":Boolean,\r\n\t\t\"Input 2\":String\r\n\t};\r\n\r\n\thandle.outputs = {\r\n\t\t\"Output 1\":Object,\r\n\t\t\"Output 2\":Number\r\n\t};\r\n\r\n\thandle.properties = {\r\n\t\t\"Property 1\":Boolean,\r\n\t\t\"Property 2\":Number\r\n\t};\r\n});","var sampleImported = false;\r\n\r\n// Sample will be imported when the 'ground' router going to '/page/:pageIndex'\r\nfunction startImportSample(pageData){\r\n\t// console.log(\"Current router data:\", pageData);\r\n\r\n\tif(sampleImported)\r\n\t\treturn;\r\n\r\n\tsampleImported = true;\r\n\r\n\t// This could be string instead of object\r\n\tsketch.importJSON({\r\n\t\tversion:'0.0.1',\r\n\t\t'math/random':[{\r\n\t\t\tid:0, x:298, y:73, outputs:{\r\n\t\t\t\tOut:[{\r\n\t\t\t\t\tid:2, name:'A'\r\n\t\t\t\t}]\r\n\t\t\t}\r\n\t\t}, {\r\n\t\t\tid:1, x:298, y:239, outputs:{\r\n\t\t\t\tOut:[{\r\n\t\t\t\t\tid:2, name:'B'\r\n\t\t\t\t}]\r\n\t\t\t}\r\n\t\t}],\r\n\t\t'math/multiply':[{\r\n\t\t\tid:2, x:525, y:155, outputs:{\r\n\t\t\t\tResult:[{\r\n\t\t\t\t\tid:3, name:'Any'\r\n\t\t\t\t}]\r\n\t\t\t}\r\n\t\t}],\r\n\t\t'display/logger':[{\r\n\t\t\tid:3, x:754, y:163\r\n\t\t}],\r\n\t});\r\n\r\n\t// sketch.createNode('dummy/test', {x:252, y:103});\r\n\t// sketch.createNode('math/random', {x:298, y:73});\r\n\t// sketch.createNode('math/random', {x:297, y:239});\r\n\t// sketch.createNode('math/multiply', {x:525, y:155});\r\n\tsketch.createNode('button/simple', {x:580, y:36});\r\n\tsketch.createNode('input/simple', {x:846, y:43});\r\n}\r\n\r\n// Autoload for Blackprint Interpreter\r\nvar interTest = window.interpreter = new Blackprint.Interpreter();\r\n\r\n// Wait after ./register-handler.js was executed\r\nsetTimeout(function(){\r\n\t// These nodes are the handler that registered from ./register-handler.js\r\n\tvar registered = Blackprint.nodes;\r\n\r\n\t// We must register the node handler first to the interpreter instance\r\n\tinterTest.registerNode('math/multiply', registered.math.multiply);\r\n\tinterTest.registerNode('math/random', registered.math.random);\r\n\tinterTest.registerNode('display/logger', registered.display.logger);\r\n\tinterTest.registerNode('button/simple', registered.button.simple);\r\n\tinterTest.registerNode('input/simple', registered.input.simple);\r\n\r\n\tinterTest.importJSON('{\"math/random\":[{\"id\":0,\"x\":298,\"y\":73,\"outputs\":{\"Out\":[{\"id\":2,\"name\":\"A\"}]}},{\"id\":1,\"x\":298,\"y\":239,\"outputs\":{\"Out\":[{\"id\":2,\"name\":\"B\"}]}}],\"math/multiply\":[{\"id\":2,\"x\":525,\"y\":155,\"outputs\":{\"Result\":[{\"id\":3,\"name\":\"Any\"}]}}],\"display/logger\":[{\"id\":3,\"x\":763,\"y\":169}],\"button/simple\":[{\"id\":4,\"x\":41,\"y\":59,\"outputs\":{\"Clicked\":[{\"id\":2,\"name\":\"Exec\"}]}}],\"input/simple\":[{\"id\":5,\"x\":38,\"y\":281,\"options\":{\"value\":\"saved input\"},\"outputs\":{\"Changed\":[{\"id\":1,\"name\":\"Re-seed\"}],\"Value\":[{\"id\":3,\"name\":\"Any\"}]}}]}');\r\n\r\n\tsetTimeout(function(){\r\n\t\tconsole.warn('The interpreter on this console was different from current sketch');\r\n\t\tconsole.log(`For obtain interpreter node:%c\r\nvar node = interpreter.getNodes('button/simple')[0];\r\nvar input = interpreter.getNodes('input/simple')[0];\r\nvar logger = interpreter.getNodes('display/logger')[0];\r\n`, \"color: gray\");\r\n\t\tconsole.log(\"To click the invisible button: %cnode.clicked()\", \"color: gray\");\r\n\t\tconsole.log(\"To set the invisible input: %cinput.options.value = 'hello'\", \"color: gray\");\r\n\t\tconsole.log(\"Or send the input to the handle output directly: %cinput.handle.outputs.Value = 'hello'\", \"color: gray\");\r\n\t\tconsole.log(\"To get the logger value: %clogger.handle.inputs.Any\", \"color: gray\");\r\n\t}, 2000);\r\n}, 10);","var transitioning = 0;\nfunction animatePageTransition(views){\n\tif(views.lastSibling !== void 0)\n\t\t$(views.lastSibling).animateKey('scaleDown', 0.6, function(){\n\t\t\t$(this).addClass('disable-anim');\n\t\t});\n\n\t$(views.showedSibling).removeClass('disable-anim').animateKey('scaleUpDown', {\n\t\tduration:0.6,\n\t\tdelay:0.3,\n\t\tvisible:false\n\t});\n\n\t// Make sure showed element is not hidden after animation\n\tclearTimeout(transitioning);\n\ttransitioning = setTimeout(function(){\n\t\ttransitioning = false;\n\t\t$(views.relatedDOM).removeClass('disable-anim');\n\t}, 1000);\n}","// == Blackprint Visual Interpreter ==\r\n// You're allowed tp control related DOM element here\r\nsketch.registerInterface('button', {\r\n\textend: Blackprint.Trigger,\r\n\ttemplate: 'nodes/button.html'\r\n}, function(self){\r\n\t// Property of this scope\r\n\t/* self == {\r\n\t\tx: 0,\r\n\t\ty: 0,\r\n\t\tinputs: [],\r\n\t\toutputs: [],\r\n\t\tproperties: [],\r\n\t} */\r\n\r\n\t// To get the button element\r\n\t// self.$el('.button')\r\n\r\n\t// self.$el only available after component was initialized\r\n\t// self.init = function(){ ... }\r\n\r\n\t// Element event binding-> https://github.com/ScarletsFiction/ScarletsFrame/wiki/Element-Event\r\n\tself.clicked = function(ev){\r\n\t\tconsole.log(\"Element: 'Trigger' button clicked, going to run the handler\");\r\n\t\tself.handle.clicked && self.handle.clicked(ev);\r\n\t}\r\n});\r\n\r\n\r\n\r\n// == For Standalone Interpreter ==\r\n// You must design this to support non-browser JavaScript\r\n// As you can just copy/import this into Node.js or Deno script\r\ninterTest.registerInterface('button', function(self){\r\n\tself.clicked = function(ev){\r\n\t\tconsole.log(\"Interpreter: 'Trigger' button clicked, going to run the handler\");\r\n\t\tself.handle.clicked && self.handle.clicked(ev);\r\n\t}\r\n});","// == Blackprint Visual Interpreter ==\r\n// You're allowed tp control related DOM element here\r\nsketch.registerInterface('input', {\r\n\textend: Blackprint.Input,\r\n\ttemplate: 'nodes/input.html'\r\n}, function(self){\r\n\t// Property of this scope\r\n\t/* self == {\r\n\t\tx: 0,\r\n\t\ty: 0,\r\n\t\tinputs: [],\r\n\t\toutputs: [],\r\n\t\tproperties: [],\r\n\t} */\r\n\r\n\t// Must be placed on 'options' if we want to export the properties as JSON\r\n\tself.options = {\r\n\t\t// Two way binding-> https://github.com/ScarletsFiction/ScarletsFrame/wiki/Input-Binding\r\n\t\tvalue:'',\r\n\r\n\t\t// Listener for two way binding when value from HTML input element is being received by the framework\r\n\t\t// I'm using this for auto scale the width/height of the textarea\r\n\t\ton$value:function(old, now){\r\n\t\t\t// Scale the input box depend on character length\r\n\t\t\tvar el = self.$el('textarea');\r\n\r\n\t\t\t// Skip if textarea was larger than our auto control\r\n\t\t\t// I mean, if user have change the size manually\r\n\t\t\tif(el[0].offsetWidth > 150 || el[0].offsetHeight > 60)\r\n\t\t\t\treturn;\r\n\r\n\t\t\tif(now.length < 8)\r\n\t\t\t\tel.attr('style', '');\r\n\t\t\telse if(now.length >= 8 && now.length < 14)\r\n\t\t\t\tel.attr('style', 'width:'+(10*now.length)+'px');\r\n\t\t\telse if(now.length >= 14)\r\n\t\t\t\tel.attr('style', 'width:140px;height:50px');\r\n\t\t}\r\n\t};\r\n\r\n\tself.textChanged = function(ev){\r\n\t\tself.handle.changed(ev.target.value);\r\n\t}\r\n\r\n\t// Add event listener to textarea after element initialized\r\n\tself.init = function(){\r\n\t\t// Only create if the Blackprint handler need this\r\n\t\tif(self.handle.changed)\r\n\t\t\tself.$el('textarea').on('input', self.textChanged);\r\n\t}\r\n});\r\n\r\n\r\n\r\n// == For Standalone Interpreter ==\r\n// You must design this to support non-browser JavaScript\r\n// As you can just copy/import this into Node.js or Deno script\r\ninterTest.registerInterface('input', function(self, bind){\r\n\tvar theValue = '...';\r\n\tbind({\r\n\t\toptions:{\r\n\t\t\tset value(val){\r\n\t\t\t\ttheValue = val;\r\n\r\n\t\t\t\tif(self.handle.changed !== void 0)\r\n\t\t\t\t\tself.handle.changed(val);\r\n\t\t\t},\r\n\t\t\tget value(){\r\n\t\t\t\treturn theValue;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n});","// == Blackprint Visual Interpreter ==\r\n// You're allowed tp control related DOM element here\r\nsketch.registerInterface('logger', {\r\n\textend: Blackprint.Function,\r\n\ttemplate: 'nodes/logger.html'\r\n}, function(self){\r\n\t// Property of this scope\r\n\t/* self == {\r\n\t\tx: 0,\r\n\t\ty: 0,\r\n\t\tinputs: [],\r\n\t\toutputs: [],\r\n\t\tproperties: [],\r\n\t} */\r\n\r\n\t// One way binding-> https://github.com/ScarletsFiction/ScarletsFrame/wiki/Input-Binding\r\n\tself.log = '...';\r\n\r\n\t// Listener when log value is being send to HTML input element by the framework\r\n\t// I'm using this for auto scale the width/height of the textarea\r\n\tself.m2v$log = function(old, now){\r\n\t\t// Scale the input box depend on character length\r\n\t\tvar el = self.$el('textarea');\r\n\r\n\t\t// Skip if textarea was larger than our auto control\r\n\t\t// I mean, if user have change the size manually\r\n\t\tif(el[0].offsetWidth > 150 || el[0].offsetHeight > 60)\r\n\t\t\treturn;\r\n\r\n\t\tif(now.length < 8)\r\n\t\t\tel.attr('style', '');\r\n\t\telse if(now.length >= 8 && now.length < 14)\r\n\t\t\tel.attr('style', 'width:'+(10*now.length)+'px');\r\n\t\telse if(now.length >= 14)\r\n\t\t\tel.attr('style', 'width:140px;height:50px');\r\n\t}\r\n});\r\n\r\n\r\n\r\n// == For Standalone Interpreter ==\r\n// You must design this to support non-browser JavaScript\r\n// As you can just copy/import this into Node.js or Deno script\r\ninterTest.registerInterface('logger', function(self, bind){\r\n\tbind({\r\n\t\tset log(val){\r\n\t\t\tconsole.log(\"Logger:\", val);\r\n\t\t}\r\n\t});\r\n});","var ground = sf.views('vw-ground', 'ground');\n\n// Increase views limit from 3 into 100\nground.maxCache = 100;\n\n// https://github.com/ScarletsFiction/ScarletsFrame/wiki/Router-or-Views\nground.addRoute([\n\t{\n\t    path:'/',\n\t    template:'vw-ground/blackprint',\n\n\t    // Nested router for vw-sketch\n\t    'vw-sketch':[{\n\t    \tpath:'/page/:pageIndex',\n\t    \ttemplate:'Blackprint/page', // Import blackprint page\n\t    \ton:{\n\t    \t\t// Start importing blackprint sample here\n\t    \t\tshowed: startImportSample,\n\n\t    \t\t/*\n\t    \t\tcoming: The cable would have wrong position because the DOM still hidden,\n\t    \t\tleaving: Maybe we can uninitialize something,\n\t    \t\thidden: Animate something maybe\n\t    \t\t*/\n\t    \t}\n\t    }]\n\t}, {\n\t    path:'/getting-started',\n\t    template:'vw-ground/getting-started'\n\t},\n]).on('finish', function(){\n\tanimatePageTransition(ground);\n}).on('error', console.error);\n\nsf.views.onCrossing = function(url, target){\n\twindow.open(url, target).focus();\n}","// https://www.npmjs.com/package/scarletsframe#initializedefine-model\nsf.model.for('header', function(self, root){\n\tself.message = \"Hello\";\n\tself.description = \"Developers! \";\n\n\tvar onHomepage;\n\tself.init = function(){\n\t\tsf.url.parse(); // Trigger to reparse current URL\n\n\t\tif(!sf.url.hashes.ground || sf.url.hashes.ground === '/'){\n\t\t\tsetTimeout(function(){\n\t\t\t\ttextAnimation(\"Let's getting started!\");\n\n\t\t\t\tonHomepage = setInterval(function(){\n\t\t\t\t\tself.$el('.right').animateKey('fadeOut');\n\t\t\t\t}, 2000);\n\t\t\t}, 2000);\n\t\t}\n\t\telse textAnimation(\"Welcome to the example!\");\n\t}\n\n\tself.toHome = function(){\n\t\tground.goto('/');\n\t}\n\n\tself.toWorkspace = function(){\n\t\tclearInterval(onHomepage);\n\n\t\tground.goto('/page/1', function(){\n\t\t\tself.description = 'Developers! ';\n\t\t\tsetTimeout(function(){\n\t\t\t\ttextAnimation(\"Welcome to the example!\");\n\t\t\t}, 1000);\n\t\t});\n\t}\n\n\tfunction textAnimation(text){\n\t\tvar description = text.split('');\n\n\t\t// Text animation\n\t\tvar interval = setInterval(function(){\n\t\t\tself.description += description.shift();\n\n\t\t\tif(description.length === 0)\n\t\t\t\tclearInterval(interval);\n\t\t}, 50);\n\t}\n});","});\r\n// End of compiled file"]}