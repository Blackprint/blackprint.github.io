var hasTouchScreen = false;
if (navigator.maxTouchPoints !== void 0)
    hasTouchScreen = navigator.maxTouchPoints > 0;
else if (navigator.msMaxTouchPoints !== void 0)
    hasTouchScreen = navigator.msMaxTouchPoints > 0; 
else {
    var mQ = window.matchMedia && matchMedia("(pointer:coarse)");
    if (mQ && mQ.media === "(pointer:coarse)")
        hasTouchScreen = !!mQ.matches;
    else {
        // Fall back to user agent sniffing
        var UA = navigator.userAgent;
        hasTouchScreen = (
            /\b(BlackBerry|webOS|iPhone|IEMobile)\b/i.test(UA) ||
            /\b(Android|Windows Phone|iPad|iPod)\b/i.test(UA)
        );
    }
}

if(hasTouchScreen)
	$(document.body).addClass('disable-effect');
$(function(){
	var sketch = window.sketch = new Blackprint();

	sketch.registerNode('math/multiply', function(self){
		window.self = self; // debug test

		self.title = "Multiply";
		var inputs = self.inputs = {
			A:Number,
			B:function(val){
				console.log('node B got input:', val);
				return Number(val);
			}
		};

		var outputs = self.outputs = {
			Result:Number
		};

		// When executing node
		self.run = function(){
			console.log('processing', inputs.A, inputs.B);
			outputs.Result = inputs.A * inputs.B;
		}
	});

	sketch.registerNode('math/random', function(self){
		self.title = "Random";
		self.description = "Number (0-100)";
		self.dynamic = true; // Reexecute when doing loop somewhere

		var outputs = self.outputs = {
			Out:Number
		};

		// When executing node
		self.run = function(){
			console.log('processing', inputs.A, inputs.B);
			outputs.Result = inputs.A * inputs.B;
		}
	});

	sketch.registerNode('console/logger', function(self){
		self.title = "Logger";

		var inputs = self.inputs = {
			Log:console.log,
			Warn:console.warn,
			Error:console.error
		};
	});

	sketch.registerNode('dummy/test', function(self){
		self.title = "Test 1";

		var inputs = self.inputs = {
			"Input 1":Boolean,
			"Input 2":String
		};

		var outputs = self.outputs = {
			"Output 1":Object,
			"Output 2":Number
		};

		var properties = self.properties = {
			"Property 1":Boolean,
			"Property 2":Number
		};
	});

	$(function(){
		setTimeout(function(){
			sketch.createNode('dummy/test', {x:252, y:103});
			sketch.createNode('math/random', {x:530, y:122});
			sketch.createNode('math/multiply', {x:730, y:110});
			sketch.createNode('console/logger', {x:531, y:237});
		}, 500);
	});
});
function animatePageTransition(views){
	if(views.lastSibling !== void 0){
		// Put the current DOM after the last sibling if exist
		if(views.showedSibling)
			$(views.showedSibling).insertAfter(views.lastSibling);

		var last = $(views.lastSibling);

		// Hide last DOM
		last.animateKey('scaleDown', 0.6, function(){
			// Don't hide it if it's current page after 0.6s delay
			if(last.hasClass('page-current') === false)
				last.addClass('disable-anim');
		});
	}

	// Find view that has `disable-anim` and remove it while animate it
	for (var i = 0; i < views.relatedDOM.length; i++) {
		if(views.relatedDOM[i].classList.contains('disable-anim'))
			$(views.relatedDOM[i]).removeClass('disable-anim').animateKey('scaleUpDown', {
				duration:0.6,
				delay:(i+1)*0.3,
				visible:false
			});
	}
}
var ground = sf.views('vw-ground', 'ground');
ground.addRoute([
	{
	    path:'/',
	    template:'vw-ground/blackprint',

	    // Nested router for vw-sketch
	    'vw-sketch':[{
	    	path:'/page/:pageIndex',
	    	template:'Blackprint/page', // Import blackprint page
	    }]
	}, {
	    path:'/getting-started',
	    template:'vw-ground/getting-started'
	},
]);

// Increase views limit from 3 into 100
ground.maxCache = 100;

ground.on('routeFinish routeCached', function(){
	animatePageTransition(ground);
});

ground.on('routeError', function(e){
	console.warn(e);
});
// https://www.npmjs.com/package/scarletsframe#initializedefine-model
sf.model.for('header', function(self, root){
	self.message = "Hello";
	self.description = "Developers! ";

	var onHomepage;
	self.init = function(){
		sf.url.parse(); // Trigger to reparse current URL

		if(!sf.url.hashes.ground || sf.url.hashes.ground === '/'){
			setTimeout(function(){
				textAnimation("Let's getting started!");

				onHomepage = setInterval(function(){
					self.$el('.right').animateKey('fadeOut');
				}, 2000);
			}, 2000);
		}
		else textAnimation("Welcome to the example!");
	}

	self.toWorkspace = function(){
		clearInterval(onHomepage);

		ground.goto('/page/1', function(){
			self.description = 'Developers! ';
			setTimeout(function(){
				textAnimation("Welcome to the example!");
			}, 1000);
		});
	}

	function textAnimation(text){
		var description = text.split('');

		// Text animation
		var interval = setInterval(function(){
			self.description += description.shift();

			if(description.length === 0)
				clearInterval(interval);
		}, 50);
	}
});
//# sourceMappingURL=myjs.min.1583553481267.js.map
