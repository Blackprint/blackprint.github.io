;{async function imports(urls){if(typeof sf !== 'undefined' && sf.loader !== void 0)return await sf.loader.mjs(urls);return Promise.all(urls.map(v => import(v)));};imports.task = function(){return typeof sf !== 'undefined' && sf.loader !== void 0 ? sf.loader.task : null};;globalThis._sf1cmplr ??= {};let p_sf1cmplr = _sf1cmplr["myjs.min.js"] ??= {};// Please use sketch.on('...', callback) instead
// This is used if no one listened to the event
var BlackprintEventFallback = {
	error(error){
		BlackprintEventFallback.error.types[error.type](error.data || error);
	},
	'cable.wrong_pair'({ port, cable }){
		SmallNotif.add(`The cable is not suitable (${cable.source}, ${port.source})`, 'yellow');
	},
	'cable.wrong_type'({ cable, iface, port, target }){
		SmallNotif.add(iface.title+"> Port from '"+port.iface.title + " - " + port.name+"' was not an "+(target.type._name || target.type.name), 'yellow');
	},
	'cable.wrong_type_pair'({ cable, port, target }){
		SmallNotif.add(`The cable type is not suitable (${target.type.name}, ${port.type.name})`, 'yellow');
	},
	'cable.duplicate_removed'({ cable, port }){
		SmallNotif.add("Duplicated cable removed", 'yellow');
	},
	'cable.replaced'({ cable, port }){
		SmallNotif.add("Cable was replaced because input doesn't support array", 'yellow');
	}
};

BlackprintEventFallback.error.types = {
	node_port_not_found({ iface, portName }){
		SmallNotif.add(`Node port not found for ${iface.title} with name: ${portName}`, 'red');
	},
	node_not_found({ namespace }){
		SmallNotif.add(`Node for ${namespace} was not found, maybe .registerNode() haven't being called?`, 'red')
	},
	node_delete_not_found({ iface }){
		SmallNotif.add("Node was not found on the list", 'red');
		console.error("Node was not found on the list", iface);
	},
	node_template_not_found({ tagName, element }){
		SmallNotif.add(`It seems '${tagName}' HTML haven't been registered as component or can't be loaded.`, 'red');
		console.error("It seems '"+tagName+"' HTML haven't been registered as component or can't be loaded. Please double check the interface file path or name, the interface path name and the file name is case sensitive.", element);
	},
};

window.addEventListener('error', function(e){
	SmallNotif.add("Something went wrong..");
});

window.addEventListener('onunhandledrejection', function(e){
	SmallNotif.add("Something went wrong..");
});
// New engine instance (separated from the editor) that can be accessed from the console
let engine = new Blackprint.Engine();

console.log("-- Do you want to run a sample for engine-js?");
console.log("-- Call engineTest() from this console");

window.engineTest = async function(){
	if(!window.confirm("This action will clear current workspace, are you sure to continue?"))
		return;

	// These nodes are the handler that registered from ./register-handler.js
	var registered = Blackprint.nodes;

	console.log("-- The sketch and the console was imported from same JSON example, but they're imported in different engine. Any modification from the sketch page will not change the imported console nodes.");

	// Go to first sketch page
	await views.goto('/sketch/1');

	// Clear all sketch page
	SketchList.forEach(sketch => sketch.clearNodes());

	// For the editor (sketch page)
	SketchList[0].importJSON(sampleList["Random Multiply"]);

	// For console (on DevTools)
	await engine.importJSON(sampleList['Random Multiply']);


	// Just some information when using on DevTools console
	console.warn(`The engine nodes on this console is using sample from 'Random Multiply'\n> %csampleList["Random Multiply"]`, "color: gray");
	console.warn('If you want to import your JSON, don\'t forget to run engine.clearNodes() first');

	console.log(`For obtain engine node:%c
var button = engine.iface.myButton;
var input = engine.iface.myInput;
var logger = engine.iface.myLogger;
`, "color: gray");
	console.log("To click on invisible button: %cbutton.clicked()", "color: gray");
	console.log("To set the invisible input: %cinput.data.value = 'hello'", "color: gray");
	console.log("Or send the input to the handle output directly: %cinput.const.Output.Value = 'hello'", "color: gray");
	console.log("To get the logger value: %clogger.const.Input.Any", "color: gray");
}
$(function(){

	// Fix for Telegram who encode the URL after the hashtag
	if((location.hash.includes('%23'))){
		location.hash = decodeURIComponent(location.hash)
	}

	let importSketch = sf.URI.data.importSketch;
	if(importSketch !== void 0){
		Modal.hide();

		setTimeout(()=> {
			importSketch = pako.inflateRaw(Base64.toUint8Array(importSketch[0]), {to: 'string'});
			SketchImporter.loadJSON(importSketch);
		}, 1000);
	}

	setTimeout(()=> {
		// Disable VFX for mobile device or non-chrome browser
		if(/android|ios/i.test(navigator.userAgent) || !/chrome/i.test(navigator.userAgent)){
			sf.model('header').switchVFX();
		}
	}, 100);
});
var sampleList = {
	"Empty Sketch": {"_":{"moduleJS":["https://cdn.jsdelivr.net/npm/@blackprint/nodes@0.0.7/dist/nodes-decoration.min.mjs"]},"Decoration/Text/Notes":[{"i":0,"x":93,"y":89,"data":{"value":"Hiya!\n\nI'm a placeholder for this sketch container.\n\nYou can delete me by right clicking my header, and create new nodes by right clicking the container."}}]},

	"Random Multiply": {"_":{"moduleJS":["https://cdn.jsdelivr.net/npm/@blackprint/nodes@0.0.7/dist/nodes-example.min.mjs"]},"Example/Math/Random":[{"i":0,"x":298,"y":73,"output":{"Out":[{"i":2,"name":"A"}]}},{"i":1,"x":298,"y":239,"output":{"Out":[{"i":2,"name":"B"}]}}],"Example/Math/Multiply":[{"i":2,"x":525,"y":155,"output":{"Result":[{"i":3,"name":"Any"}]}}],"Example/Display/Logger":[{"i":3,"id":"myLogger","x":763,"y":169}],"Example/Button/Simple":[{"i":4,"id":"myButton","x":41,"y":59,"output":{"Clicked":[{"i":2,"name":"Exec"}]}}],"Example/Input/Simple":[{"i":5,"id":"myInput","x":38,"y":281,"data":{"value":"saved input"},"output":{"Changed":[{"i":1,"name":"Re-seed"}],"Value":[{"i":3,"name":"Any"}]}}]},

	"Audio and Video": {"_":{"moduleJS":["https://cdn.jsdelivr.net/npm/@blackprint/nodes@0.0.7/dist/nodes-example.min.mjs", "https://cdn.jsdelivr.net/npm/@blackprint/nodes@0.0.7/dist/nodes-input.min.mjs", "https://cdn.jsdelivr.net/npm/@blackprint/nodes@0.0.7/dist/nodes-decoration.min.mjs", "https://cdn.jsdelivr.net/npm/@blackprint/nodes@0.0.7/dist/nodes-console.min.mjs", "https://cdn.jsdelivr.net/npm/@blackprint/nodes-multimedia@0.0.2/dist/nodes-multimedia.mjs", "https://cdn.jsdelivr.net/npm/@blackprint/nodes-pixi.js@0.0.1/dist/nodes-pixijs.mjs"]},"Input/File":[{"i":0,"x":74,"y":26,"output":{"URL":[{"i":7,"name":"URL"}]}},{"i":1,"x":47,"y":557}],"Multimedia/Audio/Input/Microphone":[{"i":2,"x":21,"y":321}],"Multimedia/Audio/Output/Destination":[{"i":3,"x":597,"y":273}],"Multimedia/Audio/Effect/PingPongDelay":[{"i":4,"x":322,"y":222,"data":{"mix":0.5,"time":0.3,"feedback":0.5},"output":{"Out":[{"i":3,"name":"In"}]}}],"Example/Button/Simple":[{"i":5,"x":35,"y":139,"output":{"Clicked":[{"i":7,"name":"Play"}]}},{"i":6,"x":39,"y":225,"output":{"Clicked":[{"i":7,"name":"Pause"}]}}],"Multimedia/Player":[{"i":7,"x":325,"y":34,"output":{"AudioNode":[],"Element":[],"VideoTrack":[{"i":9,"name":"VideoTrack"}],"AudioTrack":[]}}],"Input/SliderBox":[{"i":8,"x":141,"y":417,"data":{"0":{"value":0,"min":-100,"max":100,"step":0.1},"1":{"value":0,"min":-100,"max":100,"step":0.1},"2":{"value":1,"min":-100,"max":100,"step":0.1},"3":{"value":1,"min":-100,"max":100,"step":0.1},"4":{"value":0,"min":-100,"max":100,"step":0.1}},"output":{"0":[{"i":10,"name":"x"}],"1":[{"i":10,"name":"y"}],"2":[{"i":10,"name":"ScaleX"}],"3":[{"i":10,"name":"ScaleY"}],"4":[{"i":10,"name":"Rotate"}]}}],"Multimedia/Display/Video":[{"i":9,"x":593,"y":25}],"Pixi.js/Sprite":[{"i":10,"x":364,"y":374},{"i":11,"x":510,"y":544}],"Pixi.js/Display/Canvas":[{"i":12,"x":756,"y":269},{"i":13,"x":749,"y":490}],"Pixi.js/Converter/GIF":[{"i":14,"x":246,"y":643}],"Decoration/Text/Notes":[{"i":15,"x":931,"y":27,"data":{"value":"Sorry it's messy here ｡ﾟ( ﾟ^∀^ﾟ)ﾟ｡\n\nFirst you need to open video file.\nTrigger the play, or connect AudioNode to PingPongDelay first.\n\nThe AudioNode can be connected directly to WebAudio Destination.\n\nMedia Player's Element can be connected to Sprite Source."}},{"i":16,"x":58,"y":737,"data":{"value":"To begin with GIF animation, open your GIF file.\n\nThen connect to GIF Player.\nConnect the Canvas to Sprite's Source\nthen connect the Sprite to Canvas Visualization."}}]}
};
// https://www.npmjs.com/package/scarletsframe#initializedefine-model
sf.model('header', function(My, include){
	My.message = "Hello";
	My.showOptions = false;
	My.info = {scale:100};

	My.init = function(){
		sf.URI.parse(); // Trigger to reparse current URL
	}

	async function importJSON(sketch, json){
		Loading.set("Importing nodes");
		sf.loader.onProgress(function(loaded, total){
			if(loaded === total)
				Loading.set("Importing nodes");
			else Loading.set(`Downloading ${loaded}/${total}`);
		});

		await sketch.importJSON(json);
		Loading.set('');
	}

	My.mainMenu = function(ev){
		if(My.showOptions === false) return;
		let sketch = SketchList[views.data.page - 1];

		include('dropdown').show([{
			title: 'Sketch',
			icon: 'fa fa-pencil-ruler',
			deep:[{
				title: 'Open',
				icon: 'fa fa-folder-open',
				deep:[{
					title: "From Clipboard",
					async callback(){
						let val = await Swal.fire({
							title: "Paste the JSON here",
							input: "text",
						});

						val = val.value;
						if(!val) return;

						SketchImporter.loadJSON(val, sketch);
					}
				}, {
					title: "From File",
					callback(){
						var el = document.createElement("input");
						el.setAttribute('type', 'file');
						el.onchange = async function(){
							if(this.files.length === 0) return;
							if(this.files.length !== 1){
								console.log(this.files);
								console.log("Currently only support 1 file");
								SmallNotif.add('Currently only support 1 file', 'error');
								return;
							}

							let text = JSON.parse(await this.files[0].text());
							if(text){
								text = text.trim();
								if(text.slice(0, 1) !== '{')
									SmallNotif.add('Data in the file is not a JSON', 'error');
							}

							SketchImporter.loadJSON(text, sketch);
						}
						el.click();
					}
				}]
			}, {
				title:'Export',
				icon: 'fa fa-save',
				deep:[{
					title: 'To Clipboard',
					async callback(){
						let confirm = await Swal.fire({
							title: "Choose one of the export mode",
							cancelButtonText: 'Minified JSON',
							confirmButtonText: 'Prettified JS',
							denyButtonText: 'Minimal JSON',
							denyButtonColor: 'gray',
							showCancelButton: true,
							showDenyButton: true,
							showCloseButton: true
						});

						if(confirm.isDismissed && confirm.dismiss === 'backdrop')
							return;

						let option = {};
						if(confirm.isConfirmed){
							option.toJS = true;
							option.space = '\t';
						}
						else if(confirm.isDenied)
							option.position = false;

						var temp = sketch.exportJSON(option);
						navigator.clipboard.writeText(temp);

						Swal.fire({
							title: "Copied to clipboard!",
							text: temp
						});
					}
				}, {
					title: 'To File',
					callback(){
						var btn = document.createElement("a");
						var file = new Blob([sketch.exportJSON()], {type: 'application/json'});
						btn.href = URL.createObjectURL(file);
						btn.download = 'blackprint.json';
						btn.click();

						// Auto revoke after 120 sec
						setTimeout(function(){
							URL.revokeObjectURL(btn.href);
						}, 120e3);
					}
				}, {
					title: 'To URL',
					callback(){
						var compress = pako.deflateRaw(sketch.exportJSON());
						var temp = Base64.fromUint8Array(compress, true);

						sf.URI.data.importSketch = [temp];
						sf.URI.replace();

						let loc = location.href;
						navigator.clipboard.writeText(loc);

						Swal.fire({
							title: "Copied to clipboard!",
							text: loc
						});
					}
				}]
			}, {
				title: 'Examples',
				icon: 'fa fa-layer-group',
				callback(){
					Modal.goto('/example-list');
				}
			}, {
				title: 'Reload',
				icon: 'fa fa-sync',
				async callback(){
					let val = await Swal.fire({
						title: "This action will export and reimport current sketch",
						showCancelButton: true,
						showCloseButton: true
					});

					if(confirm.isDismissed && confirm.dismiss === 'backdrop')
						return;

					let sketch = SketchList[0];
					let temp = sketch.exportJSON();
					sketch.clearNodes();

					await sketch.importJSON(temp);
				}
			}]
		}, {
			title: 'Modules',
			icon: 'fa fa-layer-group',
			deep:[{
				title: 'Create Custom',
				icon: 'fa fa-plus',
				hide: sf.hotReload === void 0,
				callback(){
					Modal.goto('/custom-node-editor');
				}
			}, {
				title: (function(){
					if(sf.hotReload === void 0)
						return "Development Mode";

					if(window.___browserSync___ === void 0)
						return "Connect to module server";

					let socket = ___browserSync___.socket;
					let isConnected = socket.connected;
					let isDefault = socket.io.uri.indexOf(location.origin) === 0;

					return (!isConnected || isDefault ? "Connect to" : "Disconnect from")+' module server';
				})(),
				icon: 'fa fa-plug',
				callback(){
					if(sf.hotReload === void 0)
						return location.pathname = '/dev.html';

					if(window.___browserSync___){
						let socket = ___browserSync___.socket;
						let isConnected = socket.connected;
						let isDefault = socket.io.uri.indexOf(location.origin) === 0;

						if(isConnected && !isDefault)
							socket.disconnect();
					}

					Modal.goto('/dev-mode');
				}
			}, {
				title: 'Loaded module',
				icon: 'fa fa-boxes',
				callback(){
					Modal.goto('/module-url');
				}
			}]
		}, {
			title: 'Environment',
			icon: 'fa fa-key',
			callback(){
				Modal.goto('/environment-variables');
			}
		}, {
			title: 'Home',
			icon: 'fa fa-home',
			callback(){
				views.goto('/');
			}
		}], {
			element: My.$el('.header-left')[0],
			className: 'header-left-menu'
		});
	}

	My.cloneActive = false;
	My.cloneContainer = function(){
		let sketch = SketchList[views.data.page - 1];
		sketch.page.cloneContainer();
		My.cloneActive = sketch.page.cloneActive;
	}

	My.switchVFXActive = false;
	My.switchVFX = function(){
		My.switchVFXActive = !My.switchVFXActive;

		if(My.switchVFXActive){
			$('body').addClass('blackprint-no-vfx');
			My.visualizeActive = false;
			Blackprint.settings('visualizeFlow', false);
		}
		else $('body').removeClass('blackprint-no-vfx');
	}

	My.visualizeActive = true;
	My.visualizeFlow = function(){
		My.visualizeActive = !My.visualizeActive;
		Blackprint.settings('visualizeFlow', My.visualizeActive);
	}
});
// This project is using file-system directory structure routes
// You can just easily add .sf file inside the views-route

// ====== Main content routes ======
var views = (new sf.Views('vw-ground', 'page')) // page = http://url.com/#page/...
.on('finish', function(current, target, data){
	// Add animation
	animatePageTransition(views);
});

// Increase views limit from 3 into 100
views.maxCache = 100;


// ====== Modal content routes ======
var modal = (new sf.Views('vw-modal', false)); // false = We don't need to use hashtag route


// ====== Handle any cross domain URL ======
// Will throw error if this was not being set
sf.Views.onCrossing = function(url, target){
	window.open(url, '_blank');
}


// === Function for transitioning page ===

var transitioning = 0;
function animatePageTransition(views){
	if(views.lastSibling)
		$(views.lastSibling).animateKey('scaleDown', 0.6, function(){
			$(this).addClass('disable-anim');
		});

	if(views.showedSibling)
		$(views.showedSibling).removeClass('disable-anim').animateKey('scaleUpDown', {
			duration:0.6,
			delay:0.3,
			visible:false
		});

	// Make sure showed element is not hidden after animation
	clearTimeout(transitioning);
	transitioning = setTimeout(function(){
		transitioning = false;
		$(views.relatedDOM).removeClass('disable-anim');
	}, 1000);
};Object.assign(p_sf1cmplr,{BlackprintEventFallback,engine,sampleList,views,modal,transitioning,animatePageTransition});};
//# sourceMappingURL=myjs.min.js.map
