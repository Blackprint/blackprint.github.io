{"version":3,"sources":["init.js","js/mobile.js","js/register-handler.js","js/sample.js","js/transition.js","nodes/button.js","nodes/input.js","nodes/logger.js","vw-ground/header.js","vw-ground/router.js","vw-ground/vw-page/sketch-page.js","end.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACppNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnnBA;AACA","file":"myjs.min.js","sourcesContent":["// Wrap all .js scripts until _z_end.js\r\n// This will run after all script was loaded\r\n$(function(){\r\n\r\n// Blackprint.space = Namespace (https://github.com/ScarletsFiction/ScarletsFrame/wiki/Namespace)\r\n// sketch.scope = shortcut to obtain your model scope/context\r\n\r\nvar sketch = window.sketch = new Blackprint.Sketch();\r\nsketch.settings('visualizeFlow', true);","var hasTouchScreen = false;\r\nif (navigator.maxTouchPoints !== void 0)\r\n    hasTouchScreen = navigator.maxTouchPoints > 0;\r\nelse if (navigator.msMaxTouchPoints !== void 0)\r\n    hasTouchScreen = navigator.msMaxTouchPoints > 0;\r\nelse {\r\n    var mQ = window.matchMedia && matchMedia(\"(pointer:coarse)\");\r\n    if (mQ && mQ.media === \"(pointer:coarse)\")\r\n        hasTouchScreen = !!mQ.matches;\r\n    else {\r\n        // Fall back to user agent sniffing\r\n        var UA = navigator.userAgent;\r\n        hasTouchScreen = (\r\n            /\\b(BlackBerry|webOS|iPhone|IEMobile)\\b/i.test(UA) ||\r\n            /\\b(Android|Windows Phone|iPad|iPod)\\b/i.test(UA)\r\n        );\r\n    }\r\n}\r\n\r\nif(hasTouchScreen)\r\n\t$(document.body).addClass('disable-effect');","// Nodes here registered as 'example' namespace\r\n\r\nBlackprint.registerNode('example/math/multiply', function(node, iface){\r\n\tiface.title = \"Multiply\";\r\n\t// Let's use default node interface\r\n\r\n\t// Handle all output port here\r\n\tnode.outputs = {\r\n\t\tResult: Number,\r\n\t};\r\n\r\n\t// Kind of shortcut\r\n\tconst Output = node.outputs;\r\n\r\n\t// Handle all input port here\r\n\tconst Input = node.inputs = {\r\n\t\tExec: Blackprint.PortTrigger(function(){\r\n\t\t\tOutput.Result = multiply();\r\n\t\t\tconsole.log(\"Result has been set:\", Output.Result);\r\n\t\t}),\r\n\t\tA: Number,\r\n\t\tB: Blackprint.PortValidator(Number, function(val){\r\n\t\t\t// Executed when inputs.B is being obtained\r\n\t\t\t// And the output from other node is being assigned\r\n\t\t\t// as current port value in this node\r\n\t\t\tconsole.log(iface.title, '- Port B got input:', val);\r\n\t\t\treturn Number(val);\r\n\t\t}),\r\n\t};\r\n\r\n\t// Your own processing mechanism\r\n\tfunction multiply(){\r\n\t\tconsole.log('Multiplying', Input.A, 'with', Input.B);\r\n\t\treturn Input.A * Input.B;\r\n\t}\r\n\r\n\t// When any output value from other node are updated\r\n\t// Let's immediately change current node result\r\n\tnode.update = function(cable){\r\n\t\tOutput.Result = multiply();\r\n\t}\r\n\r\n\t// Event listener can only be registered after handle init\r\n\tnode.init = function(){\r\n\t\tiface.on('cable.connect', function(port1, port2){\r\n\t\t\tconsole.log(`Cable connected from ${port1.iface.title} (${port1.name}) to ${port2.iface.title} (${port2.name})`);\r\n\t\t});\r\n\t}\r\n\r\n\t// If you want to test it or play around from the browser console\r\n\tsetTimeout(function(){\r\n\t\tif(iface.x === void 0)\r\n\t\t\tconsole.log('Node from Interpreter:', iface);\r\n\t\telse\r\n\t\t\tconsole.log('Node from Sketch:', iface);\r\n\t}, 10);\r\n});\r\n\r\nBlackprint.registerNode('example/math/random', function(node, iface){\r\n\tiface.title = \"Random\";\r\n\tiface.description = \"Number (0-100)\";\r\n\r\n\t// Let's use default node interface\r\n\r\n\tconst Output = node.outputs = {\r\n\t\tOut: Number\r\n\t};\r\n\r\n\tvar executed = false;\r\n\tnode.inputs = {\r\n\t\t'Re-seed': Blackprint.PortTrigger(function(){\r\n\t\t\texecuted = true;\r\n\t\t\tOutput.Out = Math.round(Math.random()*100);\r\n\t\t})\r\n\t};\r\n\r\n\t// When the connected node is requesting for the output value\r\n\tnode.request = function(port, iface2){\r\n\t\t// Only run once this node never been executed\r\n\t\t// Return false if no value was changed\r\n\t\tif(executed === true)\r\n\t\t\treturn false;\r\n\r\n\t\tconsole.warn('Value request for port:', port.name, \"from node:\", iface2.title);\r\n\r\n\t\t// Let's create the value for him\r\n\t\tnode.inputs['Re-seed']();\r\n\t}\r\n});\r\n\r\nBlackprint.registerNode('example/display/logger', function(node, iface){\r\n\tiface.title = \"Logger\";\r\n\tiface.description = 'Print anything into text';\r\n\r\n\t// Let's use ../nodes/logger.js\r\n\tiface.interface = 'nodes/logger';\r\n\r\n\tconst Input = node.inputs = {\r\n\t\tAny: Blackprint.PortArrayOf(null) // Any data type, and can be used for many cable\r\n\t};\r\n\r\n\tfunction refreshLogger(val){\r\n\t\tif(val === null)\r\n\t\t\tiface.log = 'null';\r\n\t\telse if(val === void 0)\r\n\t\t\tiface.log = 'undefined';\r\n\t\telse if(val.constructor === Function)\r\n\t\t\tiface.log = val.toString();\r\n\t\telse if(val.constructor === String || val.constructor === Number)\r\n\t\t\tiface.log = val;\r\n\t\telse\r\n\t\t\tiface.log = JSON.stringify(val);\r\n\t}\r\n\r\n\tnode.init = function(){\r\n\t\t// Let's show data after new cable was connected or disconnected\r\n\t\tiface.on('cable.connect cable.disconnect', function(){\r\n\t\t\tconsole.log(\"A cable was changed on Logger, now refresing the input element\");\r\n\t\t\trefreshLogger(Input.Any);\r\n\t\t});\r\n\r\n\t\tiface.inputs.Any.on('value', function(port){\r\n\t\t\tconsole.log(\"I connected to\", port.name, \"port from\", port.iface.title, \"that have new value:\", port.value);\r\n\r\n\t\t\t// Let's take all data from all connected nodes\r\n\t\t\t// Instead showing new single data-> val\r\n\t\t\trefreshLogger(Input.Any);\r\n\t\t});\r\n\t}\r\n});\r\n\r\nBlackprint.registerNode('example/button/simple', function(node, iface){\r\n\t// node = under ScarletsFrame element control\r\n\tiface.title = \"Button\";\r\n\r\n\t// Let's use ../nodes/button.js\r\n\tiface.interface = 'nodes/button';\r\n\r\n\t// handle = under Blackprint node flow control\r\n\tconst Output = node.outputs = {\r\n\t\tClicked: Function\r\n\t};\r\n\r\n\t// Proxy event object from: node.clicked -> node.clicked -> outputs.Clicked\r\n\tnode.clicked = function(ev){\r\n\t\tconsole.log('button/simple: got', ev, \"time to trigger to the other node\");\r\n\t\tOutput.Clicked(ev);\r\n\t}\r\n});\r\n\r\nBlackprint.registerNode('example/input/simple', function(node, iface){\r\n\t// iface = under ScarletsFrame element control\r\n\tiface.title = \"Input\";\r\n\r\n\t// Let's use ../nodes/input.js\r\n\tiface.interface = 'nodes/input';\r\n\r\n\t// handle = under Blackprint node flow control\r\n\tconst Output = node.outputs = {\r\n\t\tChanged: Function,\r\n\t\tValue: String, // Default to empty string\r\n\t};\r\n\r\n\tiface.options = {\r\n\t\tvalue:'...'\r\n\t};\r\n\r\n\t// Bring value from imported node to handle output\r\n\tnode.imported = function(options){\r\n\t\tconsole.warn(\"Old options:\", JSON.stringify(iface.options));\r\n\t\tconsole.warn(\"Imported options:\", JSON.stringify(options));\r\n\r\n\t\tiface.options = options;\r\n\t\tOutput.Value = options.value;\r\n\t}\r\n\r\n\t// Proxy string value from: node.changed -> node.changed -> outputs.Value\r\n\t// And also call outputs.Changed() if connected to other node\r\n\tnode.changed = function(text, ev){\r\n\t\t// This node still being imported\r\n\t\tif(iface.importing !== false)\r\n\t\t\treturn;\r\n\r\n\t\tconsole.log('The input box have new value:', text);\r\n\r\n\t\t// node.options.value === text;\r\n\t\tOutput.Value = iface.options.value;\r\n\r\n\t\t// This will call every connected node\r\n\t\tOutput.Changed();\r\n\t}\r\n});\r\n\r\n// Does nothing :3\r\nBlackprint.registerNode('example/dummy/test', function(node, iface){\r\n\tiface.title = \"Do nothing\";\r\n\r\n\t// PortName must different any port\r\n\tnode.inputs = {\r\n\t\t\"Input 1\": Boolean,\r\n\t\t\"Input 2\": String\r\n\t};\r\n\r\n\tnode.outputs = {\r\n\t\t\"Output 1\": Object,\r\n\t\t\"Output 2\": Number\r\n\t};\r\n\r\n\tnode.properties = {\r\n\t\t\"Property 1\": Boolean,\r\n\t\t\"Property 2\": Number\r\n\t};\r\n});","var sampleList = window.sampleList = {\r\n\t\"Default sample\": {\"example/math/random\":[{\"id\":0,\"x\":298,\"y\":73,\"outputs\":{\"Out\":[{\"id\":2,\"name\":\"A\"}]}},{\"id\":1,\"x\":298,\"y\":239,\"outputs\":{\"Out\":[{\"id\":2,\"name\":\"B\"}]}}],\"example/math/multiply\":[{\"id\":2,\"x\":525,\"y\":155,\"outputs\":{\"Result\":[{\"id\":3,\"name\":\"Any\"}]}}],\"example/display/logger\":[{\"id\":3,\"x\":763,\"y\":169}],\"example/button/simple\":[{\"id\":4,\"x\":41,\"y\":59,\"outputs\":{\"Clicked\":[{\"id\":2,\"name\":\"Exec\"}]}}],\"example/input/simple\":[{\"id\":5,\"x\":38,\"y\":281,\"options\":{\"value\":\"saved input\"},\"outputs\":{\"Changed\":[{\"id\":1,\"name\":\"Re-seed\"}],\"Value\":[{\"id\":3,\"name\":\"Any\"}]}}]},\r\n};\r\n\r\n// Autoload for Blackprint Interpreter\r\nvar interTest = window.interpreter = new Blackprint.Interpreter();\r\n\r\nconsole.log(\"-- Do you want to run a sample for interpreter-js?\");\r\nconsole.log(\"-- Call interpreterTest() from this console\");\r\n\r\n// Wait after ./register-handler.js was executed\r\nwindow.interpreterTest = function(){\r\n\t// These nodes are the handler that registered from ./register-handler.js\r\n\tvar registered = Blackprint.nodes;\r\n\r\n\tconsole.log(\"-- The sketch and the console was imported from same JSON example, but they're imported in different interpreter. Any modification from the sketch page will not change the imported console nodes.\");\r\n\tsketch.clearNodes();\r\n\tsketch.importJSON(sampleList[\"Default sample\"]);\r\n\r\n\t// We must register the node handler first\r\n\tBlackprint.Interpreter.registerNode('example/math/multiply', registered.example.math.multiply);\r\n\tBlackprint.Interpreter.registerNode('example/math/random', registered.example.math.random);\r\n\tBlackprint.Interpreter.registerNode('example/display/logger', registered.example.display.logger);\r\n\tBlackprint.Interpreter.registerNode('example/button/simple', registered.example.button.simple);\r\n\tBlackprint.Interpreter.registerNode('example/input/simple', registered.example.input.simple);\r\n\r\n\tinterTest.importJSON(sampleList['Default sample']);\r\n\r\n\tsetTimeout(function(){\r\n\t\tconsole.warn('The interpreter nodes on this console is using default sample\\n> sampleList[\"Default sample\"]');\r\n\t\tconsole.warn('If you want to import your JSON, don\\'t forget to run interpreter.clearNodes() first');\r\n\t\tconsole.log(`For obtain interpreter node:%c\r\nvar button = interpreter.getNodes('example/button/simple')[0];\r\nvar input = interpreter.getNodes('example/input/simple')[0];\r\nvar logger = interpreter.getNodes('example/display/logger')[0];\r\n`, \"color: gray\");\r\n\t\tconsole.log(\"To click on invisible button: %cbutton.clicked()\", \"color: gray\");\r\n\t\tconsole.log(\"To set the invisible input: %cinput.options.value = 'hello'\", \"color: gray\");\r\n\t\tconsole.log(\"Or send the input to the handle output directly: %cinput.const.Output.Value = 'hello'\", \"color: gray\");\r\n\t\tconsole.log(\"To get the logger value: %clogger.const.Input.Any\", \"color: gray\");\r\n\t}, 2000);\r\n}","var transitioning = 0;\nfunction animatePageTransition(views){\n\tif(views.lastSibling !== void 0)\n\t\t$(views.lastSibling).animateKey('scaleDown', 0.6, function(){\n\t\t\t$(this).addClass('disable-anim');\n\t\t});\n\n\t$(views.showedSibling).removeClass('disable-anim').animateKey('scaleUpDown', {\n\t\tduration:0.6,\n\t\tdelay:0.3,\n\t\tvisible:false\n\t});\n\n\t// Make sure showed element is not hidden after animation\n\tclearTimeout(transitioning);\n\ttransitioning = setTimeout(function(){\n\t\ttransitioning = false;\n\t\t$(views.relatedDOM).removeClass('disable-anim');\n\t}, 1000);\n}","// == Blackprint Visual Interpreter ==\r\n// You're allowed tp control related DOM element here\r\nBlackprint.registerInterface('nodes/button', function(iface){\r\n\t// Property of this scope\r\n\t/* iface == {\r\n\t\tx: 0,\r\n\t\ty: 0,\r\n\t\tinputs: [],\r\n\t\toutputs: [],\r\n\t\tproperties: [],\r\n\t} */\r\n\r\n\t// To get the button element\r\n\t// iface.$el('.button')\r\n\r\n\t// iface.$el only available after component was initialized\r\n\t// iface.init = function(){ ... }\r\n\r\n\t// Element event binding-> https://github.com/ScarletsFiction/ScarletsFrame/wiki/Element-Event\r\n\tiface.clicked = function(ev){\r\n\t\tconsole.log(\"Element: 'Trigger' button clicked, going to run the handler\");\r\n\t\tiface.node.clicked && iface.node.clicked(ev);\r\n\t}\r\n});\r\n\r\n\r\n\r\n// == For Standalone Interpreter ==\r\n// You must design this to support non-browser JavaScript\r\n// As you can just copy/import this into Node.js or Deno script\r\nBlackprint.Interpreter.registerInterface('nodes/button', function(iface){\r\n\tiface.clicked = function(ev){\r\n\t\tconsole.log(\"Interpreter: 'Trigger' button clicked, going to run the handler\");\r\n\t\tiface.node.clicked && iface.node.clicked(ev);\r\n\t}\r\n});","// == Blackprint Visual Interpreter ==\r\n// You're allowed tp control related DOM element here\r\nBlackprint.registerInterface('nodes/input', function(iface){\r\n\t// Property of this scope\r\n\t/* iface == {\r\n\t\tx: 0,\r\n\t\ty: 0,\r\n\t\tinputs: [],\r\n\t\toutputs: [],\r\n\t\tproperties: [],\r\n\t} */\r\n\r\n\t// Must be placed on 'options' if we want to export the properties as JSON\r\n\tiface.options = {\r\n\t\t// Two way binding-> https://github.com/ScarletsFiction/ScarletsFrame/wiki/Input-Binding\r\n\t\tvalue:'',\r\n\r\n\t\t// Listener for two way binding when value from HTML input element is being received by the framework\r\n\t\t// I'm using this for auto scale the width/height of the textarea\r\n\t\ton$value:function(now){\r\n\t\t\t// Scale the input box depend on character length\r\n\t\t\tvar el = iface.$el('textarea');\r\n\r\n\t\t\t// Skip if textarea was larger than our auto control\r\n\t\t\t// I mean, if user have change the size manually\r\n\t\t\tif(el[0].offsetWidth > 150 || el[0].offsetHeight > 60)\r\n\t\t\t\treturn;\r\n\r\n\t\t\tif(now.length < 8)\r\n\t\t\t\tel.attr('style', '');\r\n\t\t\telse if(now.length >= 8 && now.length < 14)\r\n\t\t\t\tel.attr('style', 'width:'+(10*now.length)+'px');\r\n\t\t\telse if(now.length >= 14)\r\n\t\t\t\tel.attr('style', 'width:140px;height:50px');\r\n\t\t}\r\n\t};\r\n\r\n\tiface.textChanged = function(ev){\r\n\t\tiface.node.changed(ev.target.value);\r\n\t}\r\n\r\n\t// Add event listener to textarea after element initialized\r\n\tiface.init = iface.hotReloaded = function(){\r\n\t\t// Only create if the Blackprint handler need this\r\n\t\tif(iface.node.changed)\r\n\t\t\tiface.$el('textarea').on('input', iface.textChanged);\r\n\t}\r\n});\r\n\r\n\r\n// == For Standalone Interpreter ==\r\n// You must design this to support non-browser JavaScript\r\n// As you can just copy/import this into Node.js or Deno script\r\nBlackprint.Interpreter.registerInterface('nodes/input', function(iface, bind){\r\n\tvar theValue = '...';\r\n\tbind({\r\n\t\toptions:{\r\n\t\t\tset value(val){\r\n\t\t\t\ttheValue = val;\r\n\r\n\t\t\t\tif(iface.node.changed !== void 0)\r\n\t\t\t\t\tiface.node.changed(val);\r\n\t\t\t},\r\n\t\t\tget value(){\r\n\t\t\t\treturn theValue;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n});","// == Blackprint Visual Interpreter ==\r\n// You're allowed tp control related DOM element here\r\nBlackprint.registerInterface('nodes/logger', function(iface){\r\n\t// Property of this scope\r\n\t/* iface == {\r\n\t\tx: 0,\r\n\t\ty: 0,\r\n\t\tinputs: [],\r\n\t\toutputs: [],\r\n\t\tproperties: [],\r\n\t} */\r\n\r\n\t// One way binding-> https://github.com/ScarletsFiction/ScarletsFrame/wiki/Input-Binding\r\n\tiface.log = '...';\r\n\r\n\t// Listener when log value is being send to HTML input element by the framework\r\n\t// I'm using this for auto scale the width/height of the textarea\r\n\tiface.m2v$log = function(now){\r\n\t\t// Scale the input box depend on character length\r\n\t\tvar el = iface.$el('textarea');\r\n\r\n\t\t// Skip if textarea was larger than our auto control\r\n\t\t// I mean, if user have change the size manually\r\n\t\tif(el[0].offsetWidth > 150 || el[0].offsetHeight > 60)\r\n\t\t\treturn;\r\n\r\n\t\tif(now.length < 8)\r\n\t\t\tel.attr('style', '');\r\n\t\telse if(now.length >= 8 && now.length < 14)\r\n\t\t\tel.attr('style', 'width:'+(10*now.length)+'px');\r\n\t\telse if(now.length >= 14)\r\n\t\t\tel.attr('style', 'width:140px;height:50px');\r\n\t}\r\n});\r\n\r\n\r\n\r\n// == For Standalone Interpreter ==\r\n// You must design this to support non-browser JavaScript\r\n// As you can just copy/import this into Node.js or Deno script\r\nBlackprint.Interpreter.registerInterface('nodes/logger', function(iface, bind){\r\n\tvar log = '...';\r\n\tbind({\r\n\t\tget log(){\r\n\t\t\treturn log;\r\n\t\t},\r\n\t\tset log(val){\r\n\t\t\tlog = val;\r\n\t\t\tconsole.log(\"Logger:\", val);\r\n\t\t}\r\n\t});\r\n});","// https://www.npmjs.com/package/scarletsframe#initializedefine-model\nsf.model('header', function(self, root){\n\tself.message = \"Hello\";\n\tself.description = \"Developers! \";\n\tself.showOptions = false;\n\n\tself.info = {scale:100};\n\n\tvar onHomepage;\n\tself.init = function(){\n\t\tsf.url.parse(true); // Trigger to reparse current URL\n\n\t\tif(!sf.url.routes.ground || sf.url.routes.ground === '/'){\n\t\t\tsetTimeout(function(){\n\t\t\t\ttextAnimation(\"Let's getting started!\");\n\n\t\t\t\tonHomepage = setInterval(function(){\n\t\t\t\t\tself.$el('.right').animateKey('fadeOut');\n\t\t\t\t}, 2000);\n\t\t\t}, 2000);\n\t\t}\n\t\telse{\n\t\t\tself.description = \"Developers! \";\n\t\t\ttextAnimation(\"Welcome to the example!\");\n\n\t\t\tself.showOptions = true;\n\n\t\t\tsketch.scope('container').onScale = function(scale){\n\t\t\t\tself.info.scale = Math.round(scale*100);\n\t\t\t}\n\t\t}\n\t}\n\n\tself.toHome = function(){\n\t\tground.goto('/');\n\t}\n\n\tself.toWorkspace = function(){\n\t\tclearInterval(onHomepage);\n\n\t\tground.goto('/page/1', function(){\n\t\t\tself.description = 'Developers! ';\n\t\t\tsetTimeout(function(){\n\t\t\t\ttextAnimation(\"Welcome to the example!\");\n\t\t\t}, 1000);\n\t\t});\n\t}\n\n\tfunction textAnimation(text){\n\t\tvar description = text.split('');\n\n\t\t// Text animation\n\t\tvar interval = setInterval(function(){\n\t\t\tself.description += description.shift();\n\n\t\t\tif(description.length === 0)\n\t\t\t\tclearInterval(interval);\n\t\t}, 50);\n\t}\n\n\tself.cloneActive = false;\n\tself.cloneContainer = function(){\n\t\tself.cloneActive = !self.cloneActive;\n\n\t\tif(self.cloneActive){\n\t\t\tif(self.switchVFXActive === false)\n\t\t\t\tself.switchVFX();\n\n\t\t\t// Reset current container view\n\t\t\tvar container = sketch.scope('container');\n\t\t\tcontainer.pos.x = 0;\n\t\t\tcontainer.pos.y = 0;\n\t\t\tcontainer.scale = 1; // 100% scale\n\n\t\t\tvar mini = sketch.cloneContainer(); // Clone 1\n\n\t\t\t// Remove the dropdown and SVG animation\n\t\t\t// from mini container\n\t\t\t$('sf-m[name=\"dropdown\"], animate', mini).remove();\n\n\t\t\t// Clone into new window\n\t\t\tsf.window.create({\n\t\t\t\ttitle: \"Cloned Sketch Container\",\n\t\t\t\ttemplateHTML: sketch.cloneContainer() // Clone 2\n\t\t\t}, refreshViewport);\n\n\t\t\t// Put the mini container into DOM\n\t\t\t$('.mini-blackprint').removeClass('hidden').append(mini); // Clone 1\n\n\t\t\t// Refresh mini viewport size\n\t\t\t// I put it like this for a reason\n\t\t\trefreshViewport();\n\t\t\tfunction refreshViewport(){\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tcontainer.pos.x = -0.1;\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\tcontainer.pos.x = 0;\n\t\t\t\t\t}, 500);\n\t\t\t\t}, 1000);\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\t$('.mini-blackprint').addClass('hidden').text('');\n\t\t\tsf.window.destroy();\n\t\t}\n\t}\n\n\tself.switchVFXActive = false;\n\tself.switchVFX = function(){\n\t\tself.switchVFXActive = !self.switchVFXActive;\n\n\t\tif(self.switchVFXActive){\n\t\t\tsketch.scope('container').$el.addClass('performance');\n\t\t\tself.visualizeActive = false;\n\t\t\tBlackprint.settings('visualizeFlow', false);\n\t\t}\n\t\telse sketch.scope('container').$el.removeClass('performance');\n\t}\n\n\tself.visualizeActive = true;\n\tself.visualizeFlow = function(){\n\t\tself.visualizeActive = !self.visualizeActive;\n\t\tBlackprint.settings('visualizeFlow', self.visualizeActive);\n\t}\n\n\tself.saveSketch = function(ev){\n\t\tsketch.scope('dropdown').show([{\n\t\t\ttitle:'Copy JSON',\n\t\t\tcallback:function(){\n\t\t\t\tvar temp = sketch.exportJSON();\n\t\t\t\tnavigator.clipboard.writeText(temp);\n\n\t\t\t\tswal({\n\t\t\t\t\ttitle: \"Copied to clipboard!\",\n\t\t\t\t\ttext: temp\n\t\t\t\t});\n\t\t\t}\n\t\t}, {\n\t\t\ttitle:'To File',\n\t\t\tcallback:function(){\n\t\t\t\tvar btn = document.createElement(\"a\");\n\t\t\t\tvar file = new Blob([sketch.exportJSON()], {type: 'application/json'});\n\t\t\t\tbtn.href = URL.createObjectURL(file);\n\t\t\t\tbtn.download = 'blackprint.json';\n\t\t\t\tbtn.click();\n\n\t\t\t\t// Auto revoke after 10 sec\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tURL.revokeObjectURL(btn.href);\n\t\t\t\t}, 10000);\n\t\t\t}\n\t\t}], ev.x, ev.y);\n\t}\n\n\tself.loadSketch = function(ev){\n\t\tsketch.scope('dropdown').show([{\n\t\t\ttitle:'Append from JSON',\n\t\t\tcallback:function(){\n\t\t\t\tswal({\n\t\t\t\t\ttitle:\"Append from JSON\",\n\t\t\t\t\tcontent: \"input\",\n\t\t\t\t}).then(function(val){\n\t\t\t\t\tsketch.importJSON(val);\n\t\t\t\t});\n\t\t\t}\n\t\t}, {\n\t\t\ttitle:'Import JSON',\n\t\t\tcallback:function(){\n\t\t\t\tswal({\n\t\t\t\t\ttitle:\"Import JSON\",\n\t\t\t\t\tcontent: \"input\",\n\t\t\t\t}).then(function(val){\n\t\t\t\t\tif(!val)\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tsketch.clearNodes();\n\t\t\t\t\tsketch.importJSON(val);\n\t\t\t\t});\n\t\t\t}\n\t\t}, {\n\t\t\ttitle:'From File',\n\t\t\tcallback:function(){\n\t\t\t\tvar el = document.createElement(\"input\");\n\t\t\t\tel.setAttribute('type', 'file');\n\t\t\t\tel.onchange = function(){\n\t\t\t\t\tconsole.log(345, this);\n\t\t\t\t}\n\t\t\t\tel.click();\n\t\t\t}\n\t\t}], ev.x, ev.y);\n\t}\n});","var ground = new sf.views('vw-ground', 'ground');\n\n// Increase views limit from 3 into 100\nground.maxCache = 100;\n\n// https://github.com/ScarletsFiction/ScarletsFrame/wiki/Router-or-Views\nground.addRoute([\n\t{\n\t    path:'/',\n\t    template:'vw-ground/ground',\n\n\t    // Nested router for vw-page\n\t    'vw-page':[{\n\t    \tpath:'/page/:pageIndex',\n\t    \ttemplate:'vw-ground/vw-page/sketch-page',\n\t    \ton:{\n\t    \t\tshowed: function(){\n\t    \t\t\t// Show sketch options\n\t\t\t\t\tsf.model('header').showOptions = true;\n\t    \t\t},\n\t    \t\tleaving: function(){\n\t\t\t\t\tsf.model('header').showOptions = false;\n\t    \t\t}\n\n\t    \t\t/*\n\t    \t\tshowed: Sketch container have been loaded,\n\t    \t\tcoming: The cable would have wrong position because the DOM still hidden,\n\t    \t\tleaving: Maybe we can uninitialize something,\n\t    \t\thidden: Animate something maybe\n\t    \t\t*/\n\t    \t}\n\t    }, {\n\t\t    path:'/getting-started',\n\t\t    template:'vw-ground/vw-page/getting-started'\n\t\t}]\n\t}\n]).on('finish', function(){\n\tanimatePageTransition(ground);\n}).on('error', console.error);\n\nsf.views.onCrossing = function(url, target){\n\twindow.open(url, target).focus();\n}","var sampleImported = false;\r\nsf.component('sketch-page', function(self){\r\n\r\n\t// Will run when <sketch-page> inserted on DOM\r\n\tself.init = function(){\r\n\t\tif(sampleImported)\r\n\t\t\treturn;\r\n\r\n\t\tsampleImported = true;\r\n\r\n\t\t// This could be string instead of object\r\n\t\t// sketch.clearNodes();\r\n\t\t// sketch.importJSON(sampleList[\"Default sample\"]);\r\n\r\n\t\tsetTimeout(function(){\r\n\t\t\tsketch.importJSON(\r\n{\"Input/file\":[{\"id\":0,\"x\":74,\"y\":26,\"outputs\":{\"URL\":[{\"id\":7,\"name\":\"URL\"}]}},{\"id\":1,\"x\":47,\"y\":557}],\"WebAudio/input/microphone\":[{\"id\":2,\"x\":21,\"y\":321}],\"WebAudio/output/destination\":[{\"id\":3,\"x\":597,\"y\":273}],\"WebAudio/effect/PingPongDelay\":[{\"id\":4,\"x\":322,\"y\":222,\"options\":{\"mix\":0.5,\"time\":0.3,\"feedback\":0.5},\"outputs\":{\"Out\":[{\"id\":3,\"name\":\"In\"}]}}],\"example/button/simple\":[{\"id\":5,\"x\":35,\"y\":139,\"outputs\":{\"Clicked\":[{\"id\":7,\"name\":\"Play\"}]}},{\"id\":6,\"x\":39,\"y\":225,\"outputs\":{\"Clicked\":[{\"id\":7,\"name\":\"Pause\"}]}}],\"WebAudio/player\":[{\"id\":7,\"x\":325,\"y\":34,\"outputs\":{\"AudioNode\":[],\"Element\":[],\"VideoTrack\":[{\"id\":9,\"name\":\"VideoTrack\"}],\"AudioTrack\":[]}}],\"Input/slider-box\":[{\"id\":8,\"x\":141,\"y\":417,\"options\":{\"0\":{\"value\":0,\"min\":-100,\"max\":100,\"step\":0.1},\"1\":{\"value\":0,\"min\":-100,\"max\":100,\"step\":0.1},\"2\":{\"value\":1,\"min\":-100,\"max\":100,\"step\":0.1},\"3\":{\"value\":1,\"min\":-100,\"max\":100,\"step\":0.1},\"4\":{\"value\":0,\"min\":-100,\"max\":100,\"step\":0.1}},\"outputs\":{\"0\":[{\"id\":10,\"name\":\"x\"}],\"1\":[{\"id\":10,\"name\":\"y\"}],\"2\":[{\"id\":10,\"name\":\"ScaleX\"}],\"3\":[{\"id\":10,\"name\":\"ScaleY\"}],\"4\":[{\"id\":10,\"name\":\"Rotate\"}]}}],\"WebAudio/visualize/video\":[{\"id\":9,\"x\":593,\"y\":25}],\"Graphics/sprite\":[{\"id\":10,\"x\":364,\"y\":374},{\"id\":11,\"x\":510,\"y\":544}],\"Graphics/visualize/canvas\":[{\"id\":12,\"x\":756,\"y\":269},{\"id\":13,\"x\":749,\"y\":490}],\"Graphics/converter/gif\":[{\"id\":14,\"x\":246,\"y\":643}],\"decoration/text/notes\":[{\"id\":15,\"x\":931,\"y\":27,\"options\":{\"value\":\"Sorry it's messy here ｡ﾟ( ﾟ^∀^ﾟ)ﾟ｡\\n\\nFirst you need to open video file.\\nTrigger the play, or connect AudioNode to PingPongDelay first.\\n\\nThe AudioNode can be connected directly to WebAudio Destination.\\n\\nMedia Player's Element can be connected to Sprite Source.\"}},{\"id\":16,\"x\":58,\"y\":737,\"options\":{\"value\":\"To begin with GIF animation, open your GIF file.\\n\\nThen connect to GIF Player.\\nConnect the Canvas to Sprite's Source\\nthen connect the Sprite to Canvas Visualization.\"}}]}\r\n\t\t);}, 1000);\r\n\t}\r\n});","});\r\n// End of compiled file"]}