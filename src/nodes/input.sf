## html
<div class="node input" style="transform: translate({{ x }}px, {{ y }}px)">
  <sf-template path="Blackprint/nodes/template/header.sf"></sf-template>

  <div class="content">
    <textarea sf-bind="options.value" @input="textChanged"></textarea>

    <div class="right-port">
      <sf-template path="Blackprint/nodes/template/output-port.sf"></sf-template>
    </div>
  </div>
</div>

## js-global
// == Blackprint Visual Engine ==
// You're allowed tp control related DOM element here
Blackprint.registerInterface('nodes/input', function(iface){
	// Property of this scope
	/* iface == {
		x: 0,
		y: 0,
		inputs: [],
		outputs: [],
		properties: [],
	} */

	let waitRepaint = false;

	// Must be placed on 'options' if we want to export the properties as JSON
	iface.options = {
		// Two way binding-> https://github.com/ScarletsFiction/ScarletsFrame/wiki/Input-Binding
		value:'',

		// Listener for two way binding when value from HTML input element is being received by the framework
		// I'm using this for auto scale the width/height of the textarea
		on$value(now){
			if(waitRepaint) return;

			waitRepaint = true;
			$.afterRepaint().then(function(){
				waitRepaint = false;

				// Scale the input box depend on character length
				var el = iface.$el('textarea');

				// Skip if textarea was larger than our auto control
				// I mean, if user have change the size manually
				if(el[0].offsetWidth > 150 || el[0].offsetHeight > 60)
					return;

				if(now.length < 8)
					el.attr('style', '');
				else if(now.length >= 8 && now.length < 14)
					el.attr('style', 'width:'+(10*now.length)+'px');
				else if(now.length >= 14)
					el.attr('style', 'width:140px;height:50px');
			});
		}
	};

	iface.textChanged = function(ev){
		iface.node.changed(ev.target.value);
	}
});

// Logic only, to control HTML or graphical interface we need to use iface
Blackprint.registerNode('example/input/simple', function(node, iface){
	// iface = under ScarletsFrame element control
	iface.title = "Input";

	// Let's use ../nodes/input.js
	iface.interface = 'nodes/input';

	// handle = under Blackprint node flow control
	const Output = node.outputs = {
		Changed: Function,
		Value: String, // Default to empty string
	};

	iface.options = {
		value:'...'
	};

	// Bring value from imported node to handle output
	node.imported = function(options){
		console.warn("Old options:", JSON.stringify(iface.options));
		console.warn("Imported options:", JSON.stringify(options));

		if(options === undefined) return;
		iface.options = options;
		Output.Value = options.value;
	}

	// Proxy string value from: node.changed -> node.changed -> outputs.Value
	// And also call outputs.Changed() if connected to other node
	node.changed = function(text, ev){
		// This node still being imported
		if(iface.importing !== false)
			return;

		console.log('The input box have new value:', text);

		// node.options.value === text;
		Output.Value = iface.options.value;

		// This will call every connected node
		Output.Changed();
	}
});