## html
<sketch-panel-left class="panel {{ opened ? 'opened' : ''}}">
	<div class="content">
		<div class="preview" style="height: {{ scaledPreviewHeight }}px">
			<div class="zoom" style="transform: scale({{ previewScale }})">
				<sf-slot for="preview"></sf-slot>
			</div>
		</div>

		<div class="variable-list collapsed">
			<div class="title" @click="collapseSubPanel(this)">Variables ({{ variableCount }})</div>
			<div class="button" @click="createVariable"><i class="fa fa-plus-square"></i></div>

			<!-- /src/component/tree-list.sf -->
			<div class="tree-view" tree-section="variables" @pointerdown="checkDragNode">
				<div class="tree-item collapsed" tree-item-key="{{ key }}" sf-each="key, val in variables"
					style="display: {{ val.hidden ? 'none' : '' }}">
					<div class="title" @click="collapseTree(this)"><i class="fa tree-icon"></i> {{ key }}</div>

					{{@if val.childs != null:
						@return new $TreeList({
							parentKey: '',
							key,
							val: val.childs,
							hasChild: varFuncChildCheck
						});
					}}
				</div>
			</div>
		</div>
		<div class="function-list collapsed">
			<div class="title" @click="collapseSubPanel(this)">Functions ({{ functionCount }})</div>
			<div class="button" @click="createFunction"><i class="fa fa-plus-square"></i></div>

			<!-- /src/component/tree-list.sf -->
			<div class="tree-view" tree-section="functions" @pointerdown="checkDragNode">
				<div class="tree-item collapsed" tree-item-key="{{ key }}" sf-each="key, val in functions"
					style="display: {{ val.hidden ? 'none' : '' }}">
					<div class="title" @click="collapseTree(this)"><i class="fa tree-icon"></i> {{ key }}</div>

					{{@if val.childs != null:
						@return new $TreeList({
							parentKey: '',
							key,
							val: val.childs,
							hasChild: varFuncChildCheck
						});
					}}
				</div>
			</div>
		</div>
		<div class="node-list">
			<div class="title" @click="collapseSubPanel(this)">Nodes ({{ nodeCount }})</div>
			<div class="button" @click="createCustomNode"><i class="fa fa-plus-square"></i></div>

			<!-- /src/component/tree-list.sf -->
			<div class="tree-view" tree-section="nodes" @pointerdown="checkDragNode">
				<div class="tree-item collapsed" sf-each="key, val in nodes"
					style="display: {{ val.hidden ? 'none' : '' }}">
					<div class="title" @click="collapseTree(this)"><i class="fa tree-icon"></i> {{ key }}</div>

					{{@if val.constructor === Object:
						@return new $TreeList({parentKey: '', key, val});
					}}
				</div>
			</div>
		</div>
	</div>

	<div class="opener" @click="opened ? closePanel(event) : openPanel()">
		<i class="fas fa-chevron-{{ opened ? 'left' : 'right' }}"></i>
	</div>
</sketch-panel-left>

## scss-global
body sketch-page > .panels sketch-panel-left {
	backdrop-filter: blur(1px); // Long CSS rule = more priority
}

sketch-page > .panels sketch-panel-left {
	position: absolute;
	display: flex;
	left: 0;
	width: 200px;
	height: 100%;
	transform: translate(-190px, 0);
	transition: 0.3s ease-out transform;
	// position: relative;
	background: #00000085;
	align-items: center;
	.content {
		align-self: baseline;
		visibility: hidden;
		.preview{
			// border-bottom: 1px dashed white;
			max-width: 200px;
			max-height: 200px;
			overflow: hidden;
			.zoom{
	    		transform-origin: left top;
			}
		}
	}
	.variable-list, .function-list, .node-list {
		color: white;
		position: relative;
		width: 190px;
		border-top: 1px solid white;
		padding: 5px 5px;
		// border-bottom: 1px dashed white;
		.title, .button{
			display: inline-block;
			cursor: pointer;
		}
		.button{
			margin-right: 10px;
			float: right;
		}
		.tree-view{
			position: relative;
			max-height: 500px;
			width: 185px;
			overflow: auto;
		}
		&.collapsed {
			.tree-view {
				display: none;
			}
		}
	}
	.opener{
		cursor: pointer;
		height: 100%;
		display: flex;
		align-items: center;
		padding: 10px 0 10px 10px;
		position: absolute;
		right: 0;
		i {
			color: #ffffff70;
			position: absolute;
			right: 0;
			font-size: 12px;
			display: block;
		}
	}
	&.opened {
		transform: translate(0px, 0);
		.content {
			visibility: visible;
		}
	}
}
.anim-element sketch-page > .panels sketch-panel-left.opened .content {
	visibility: hidden;
}

## js-global
sf.component('sketch-panel-left', {template: #this.path}, function(My){
	let sketch = My.sketch = window.CurrentSketch;

	My.opened = false;
	My.preview = null;
	My.previewWidth = 200;
	My.previewScale = 1;
	My.scaledPreviewHeight = 1;

	My.variables = sketch.variables;
	My.functions = sketch.functions;
	My.nodes = Blackprint.nodes;

	My.variableCount = 0;
	My.functionCount = 0;
	My.nodeCount = 0;

	function deepCount(obj, isNodes){
		let len = 0;
		if(obj.hidden) return len;

		for(let key in obj){
			let temp = obj[key];
			if(temp == null) continue;

			if(isNodes){
				if(temp instanceof Function)
					len++;
				else len += deepCount(temp, isNodes);
			}
			else {
				if(temp.childs == null)
					len++;
				else len += deepCount(temp.childs, isNodes);
			}
		}

		obj.refresh?.();
		return len;
	}
	
	let pendingRefreshModule;
	const refreshNodesCounter = () => {
		clearTimeout(pendingRefreshModule);

		pendingRefreshModule = setTimeout(() => {
			My.nodeCount = deepCount(Blackprint.availableNode, true);
		}, 500);
	}
	let pendingRefreshVars;
	const refreshVarsCounter = () => {
		clearTimeout(pendingRefreshVars);

		pendingRefreshVars = setTimeout(() => {
			My.variableCount = deepCount(sketch.variables);
			My.functionCount = deepCount(sketch.functions);
		}, 500);
	}

	sketch.on('json.imported', refreshVarsCounter);
	Blackprint.on('moduleAdded', refreshNodesCounter);
	Blackprint.on('moduleDelete', refreshNodesCounter);
	Blackprint.on('moduleUpdate', refreshNodesCounter);
	Blackprint.on('bp_editorNodeAvailability', refreshNodesCounter);
	$(refreshNodesCounter);

	My.init = function(){
		let sketchPage = My.$el.parent('sketch-page')[0].model;
		sketchPage.panels.left = My;
	}

	let recheckPreviewSize;
	My.setPreview = function(el){
		if(el == null || My.preview !== el){
			recheckPreviewSize?.disconnect();
			recheckPreviewSize = null;
		}

		My.preview = el;
		My.previewScale = 1;
		My.scaledPreviewHeight = 1;

		if(recheckPreviewSize != null || el == null)
			return;

		let checkTime = 0;
		let checker = async function(){
			await $.afterRepaint();

			let width = el.clientWidth;
			let height = el.clientHeight;
			let scale = My.previewWidth / width;

			checkTime = Math.round(Date.now() / 100);

			My.previewScale = scale;
			My.scaledPreviewHeight = height * scale;
		}

		recheckPreviewSize = new ResizeObserver(function(items){
			if(checkTime === Math.round(Date.now() / 100)) return;
			setTimeout(checker, 200);
		});
		recheckPreviewSize.observe(el);

		setTimeout(checker, 100);
	}

	function removeBlur(){
		My.$el.css('backdrop-filter', 'none');
		setTimeout(()=> My.$el.css('backdrop-filter', ''), 300);
	}

	My.openPanel = function(){
		removeBlur();
		My.opened = true;
	}

	My.closePanel = function(ev){
		removeBlur();
		ev.stopPropagation();
		My.opened = false;
	}

	My.collapseTree = function(el){
		el = el.nextElementSibling;
		if(el == null) return;

		let hidden = el.model.hidden = !el.model.hidden;

		if(hidden)
			$(el.parentNode).addClass("collapsed");
		else $(el.parentNode).removeClass("collapsed");
	}

	My.collapseSubPanel = el => {
		$(el).parent().toggleClass("collapsed");
	}

	My.checkDragNode = ev => {
		let focus = ev.target;
		if(focus.nextElementSibling != null) return;

		focus = $(focus);

		let section = focus.parent('.tree-view').attr('tree-section');
		let itemEl = focus[0].parentNode;
		let key = itemEl.getAttribute('tree-item-key');
		if(key == null) return;

		let parent = focus.parent(".tree-item.has-child > tree-list, .tree-view > .tree-item")[0];
		if(parent == null) return;

		ToolTip.set("Create node");
		$(sf.Window).once('pointerup', evUp => {
			ToolTip.set();

			if(evUp.target.closest('sketch-page') == null) return;
			if(evUp.target.closest('sf-m.cables') != null){
				let namespace = parent.model.parentKey + '/' + key;
				$.afterRepaint().then(function(){
					let offset = evUp.target.getBoundingClientRect();

					if(section === 'nodes'){
						sketch.createNode(namespace, {
							x: evUp.clientX - offset.x,
							y: evUp.clientY - offset.y
						});
					}
					else if(section === 'functions'){
						itemEl.model.createNode(sketch, {
							x: evUp.clientX - offset.x,
							y: evUp.clientY - offset.y
						});
					}
					else if(section === 'variables'){
						DropDown.show([{
							title: "Get " + key, callback(){
								sketch.createNode('BP/Var/Get', {
									data: {name: key},
									x: evUp.clientX - offset.x,
									y: evUp.clientY - offset.y
								});
							}
						}, {
							title: "Set " + key, callback(){
								sketch.createNode('BP/Var/Set', {
									data: {name: key},
									x: evUp.clientX - offset.x,
									y: evUp.clientY - offset.y
								});
							}
						}], {x: evUp.clientX, y: evUp.clientY, event: evUp});
					}
				});
			};
		});
	}

	My.createVariable = ev => {
		SmallNotif.add("Still under development");
		// sketch.createVariable("MyVar", {value: 123, type: Number});
	}

	My.createFunction = ev => {
		SmallNotif.add("Still under development");
		// sketch.createFunction("Category/MyFunc", {input:{Number}, output:{String}, description: "desc"});
	}

	My.createCustomNode = ev => {
		Modal.goto('/custom-node-editor');
	}

	My.varFuncChildCheck = obj => obj.childs != null;
});