## html
<sf-m name="sketch-settings">
	<div class="description">Settings</div>
	<div class="list">
		<div class="item">
			<div class="title">Theme:</div>
			<select sf-bind="theme">
				<option value="default">Default</option>
				<option value="darker">Darker</option>
			</select>
		</div>
		<div class="item">
			<div class="title">Background:</div>
			<input type="text" sf-bind="background" placeholder="https://...">
		</div>
		<div class="item" style="display: {{ isDevMode ? 'block' : 'none' }}">
			<div class="title">Custom script:</div>
			<input type="text" sf-bind="customScript" placeholder="https://...">
		</div>
		<div class="item">
			<div class="title">Hide unused port</div>
			<input type="checkbox" sf-bind="hideUnusedPort">
		</div>
		<div class="item">
			<div class="title">Show sketch minimap</div>
			<input type="checkbox" sf-bind="showSketchMinimap">
		</div>
	</div>
</sf-m>

## scss-global
sf-m[name="sketch-settings"] {
	background: #292929;
	border-radius: 10px;
	border: 2px solid black;
	position: relative;
	box-shadow: 0 0 20px 0px white;
	.description{
		padding: 5px;
		color: white;
		border-bottom: 1px solid black;
		background: #111;
	}
	.list{
		padding: 5px;
		.item{
			color: #fff;
			background: #0000009e;
			border: 1px solid #000;
			padding: 5px;
			margin: 5px;
			.title{
				display: inline;
				margin-right: 10px;
			}
			select, input{
				background: black;
				border: none;
				color: white;
				outline: none;
				padding: 5px;
			}
		}
	}
}

## js-global
var SketchSettings = sf.model('sketch-settings', function(My){
	My.theme = 'default';
	My.isDevMode = sf.hotReload !== void 0;

	My.on$theme = function(now){
		$('body')
			.removeClass('node-ui-'+My.theme)
			.addClass('node-ui-'+now);
	}

	My.background = localStorage.bpBackgroundURL || '';
	My.on$background = function(now){
		$('body > .background > .img')
			.css('background-image', "url('"+(now || '/assets/img/background/black3.jpg')+"')")
			.css('background-size', "cover");

		localStorage.bpBackgroundURL = now;
	}
	if(My.background) My.on$background(My.background);

	My.hideUnusedPort = localStorage.bpHideUnusedPort == 'true' || false;
	My.on$hideUnusedPort = function(now){
		for (var i = 0; i < SketchList.length; i++) {
			let container = SketchList[i].scope('container');
			container.hideUnusedPort = now;

			let nodes = container.nodeScope.list;
			for (var a = 0; a < nodes.length; a++)
				nodes[a].hideUnusedPort = now;
		}

		localStorage.bpHideUnusedPort = now;
	}

	My.showSketchMinimap = localStorage.bpShowSketchMinimap == 'true' || false;
	My.on$showSketchMinimap = function(now){
		for (var i = 0; i < SketchList.length; i++) {
			let sketch = SketchList[i];
			let ref = sketch.page.miniViewer;

			if(now === true && ref.topRight == null){
				ref.topRight = sketch.cloneContainer(true); // Clone and get the MiniMap

				// Remove the dropdown from minimap
				$('sf-m[name="dropdown"]', ref.topRight).remove();

				// Reset current container view
				var container = sketch.scope('container');
				container.pos.x = 0;
				container.pos.y = 0;
				container.scale = 1; // 100% scale

				// Refresh mini viewport size
				refreshViewport();
				function refreshViewport(){
					setTimeout(function(){
						container.pos.x = -0.1;
						setTimeout(function(){
							container.pos.x = 0;
						}, 500);
					}, 1000);
				}
			}

			ref.topRightHidden = !now; // hide on false, show on true
		}

		localStorage.bpShowSketchMinimap = now;
	}

	// Custom script is only available on development mode
	let _customScript; 
	My.customScript = localStorage.bpCustomScript || '';
	My.on$customScript = function(now, isInit){
		if(!sf.hotReload) return;
		if(!/^http.*?js$/m.test(now)){
			localStorage.bpCustomScript = '';
			SmallNotif.add("Invalid custom script URL");
			return;
		}

		clearTimeout(_customScript);
		_customScript = setTimeout(async ()=> {
			await sf.loader.js([now], {ordered: true});
			if(!isInit) SmallNotif.add("Custom script URL was saved");
			localStorage.bpCustomScript = now;
		}, 1000);
	}
	if(My.customScript) My.on$customScript(My.customScript, true);
});