## html
<sf-m name="modal-dev-mode">
	<div class="description">Please set the Blackprint module server URL</div>
	<div class="note" style="display: {{ url === '' || url === placeholder ? 'none':'' }}" @click="connectDefault">(Click here to connect to default server)</div>
	<div class="text-input">
		<input placeholder="{{ placeholder }}" type="text" sf-bind="url" @keyup.Enter="changeServer">
	</div>
	<div class="button-import" @click="changeServer">Connect</div>
</sf-m>

## scss-global
sf-m[name="modal-dev-mode"] {
	background: #292929;
	border-radius: 10px;
	border: 2px solid black;
	position: relative;
	box-shadow: 0 0 20px 0px white;
	.description{
		padding: 10px;
		color: white;
	}
	.note{
		text-align: center;
		font-size: 12px;
		padding: 0;
		color: gray;
		margin-top: -10px;
		cursor: pointer;
	}
	.text-input{
		padding: 10px;
		position: relative;
		display: flex;

		input{
			width: 100%;
			border: 1px solid black;
			background: #161616;
			padding: 5px;
			color: white;
			outline: none;
		}
	}
	.button-import{
		position: relative;
		border-radius: 10px;
		background: #125c15;
		border: 1px solid #65a122;
		margin: 0 auto 5px auto;
		width: 120px;
		padding: 7px 10px;
		text-align: center;
		cursor: pointer;
		color: white;
		&:hover{
			background: #65a122;
			box-shadow: 0 0 9px #c6ebbd;
		}
	}
}

## js-global.router
={
	on:{
		coming(){
			setTimeout(()=> {
				sf.model('modal-dev-mode').$el('input').focus();
			}, 500);
		},
		showed(){
			setTimeout(()=> {
				sf.model('modal-dev-mode').$el('input').focus();
			}, 100);
		},
	}
}

## js-global
sf.model('modal-dev-mode', function(My){
	My.url = localStorage.BPModuleServer ??= "";
	My.placeholder = location.origin;

	My.connectDefault = function(){
		localStorage.BPModuleServer = My.url = "";
		My.changeServer();
	}

	My.changeServer = async function(clearOnFail){
		let url = My.url;
		if(!url) url = My.placeholder;
		// url = 'http://localhost:6791';

		if(url.slice(-1) === '/')
			url = url.slice(0, -1);

		let _url = url;
		url += '/browser-sync';

		if(window.___browserSync___ === void 0){
			try{
				await sf.loader.js([url+'/browser-sync-client.js?v=2']);
				await sf.loader.task;
			} catch(e) {
				SmallNotif.add("Failed to load client", "red");
				return;
			}
		}

		___browserSync___.socketUrl = url;

		let socket = ___browserSync___.socket;
		socket.disconnect();

		setTimeout(()=> {
			if(socket.connected) return;
			console.log("Failed to connect to Blackprint module server:", url);
			SmallNotif.add("Failed to connect to Blackprint module server", "red");
			socket.disconnect();
			socket.off('connect', onConnected);

			// Unset the value if this was failing on startup time
			if(clearOnFail)
				localStorage.BPModuleServer = "";
		}, 8000);

		function onConnected(){
			console.log("Connected to Blackprint module server:", url);
			SmallNotif.add("Connected to Blackprint module server", "green");
			localStorage.BPModuleServer = My.url;
		}

		socket.once('connect', onConnected);

		socket.nsp = '/browser-sync';
		socket.io.uri = url;
		socket.connect();

		socket.on('bp-docs-append', function(data){
			Blackprint.Sketch.registerDocs(data);
		});

		let newModuleLoaded = false;
		try{
			let moduleList = Object.values(await $.getJSON(_url+'/api/module-list'));
			for (var i = 0; i < moduleList.length; i++)
				moduleList[i] = _url+moduleList[i];

			if(moduleList.length !== 0){
				SmallNotif.add(`Loading ${moduleList.length} new modules`, "yellow");

				await Blackprint.loadModuleFromURL(moduleList, {
					loadBrowserInterface: true
				});

				SmallNotif.add(`New modules have been loaded`, "green");
			}

			newModuleLoaded = true;
		} catch(e) {
			SmallNotif.add(`Failed to load new modules`, "red");
			throw e;
		}

		setTimeout(()=> {
			if(newModuleLoaded) return;
			SmallNotif.add(`Loading modules was taking longer than 10s`, "red");

			if(sf.loader.pendingResources.size !== 0)
				console.log("Pending resources:", sf.loader.pendingResources);
		}, 10000);

		if(Modal.showed)
			Modal.hide();
	}

	if(My.url !== '' && sf.hotReload !== void 0){
		$(() => setTimeout(()=> My.changeServer(true), 200));
	}
});