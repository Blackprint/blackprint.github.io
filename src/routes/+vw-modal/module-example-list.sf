## html
<div style="height: 70vh;">
	<sf-m name="module-example-list">
		<div class="description">Please select one of the module to load the example list</div>
		<div class="url-input">
			<input class="column {{ urlValidity }}" type="text" @keyup.Enter="addExampleFromURL()" sf-bind="urlInput" placeholder="Paste URL of GitHub repository or NPM registry here and press enter">
		</div>
		<div class="list">
			<div class="item" sf-each="x in list" @click="open(x)">
				{{ x.packageName }}
			</div>
		</div>
	</sf-m>
</div>

## scss-global
sf-m[name="module-example-list"] {
	background: #292929;
	border-radius: 10px;
	border: 2px solid black;
	position: relative;
	height: 400px;
	box-shadow: 0 0 20px 0px white;
	.description{
		padding: 10px;
		color: white;
		text-align: center;
		background: #00000040;
		border-bottom: 1px solid black;
		a{
			color: skyblue;
		}
	}
	.url-input{
		display: flex;
		.column{
			width: 100%;
			color: gray;
			background: #00000094;
			border: none;
			padding: 7px;
			outline: none;
			&.invalid{
				outline: 1px solid red;
			}
		}
	}
	.list{
		padding: 5px;
		.item{
			color: #fff;
			background: #00000052;
			cursor: pointer;
			border-radius: 17px;
			padding: 5px 8px;
			margin: 5px;
			border: 1px solid #8b6d0099;
			&:hover{
				background: #ffffff12;
			}
		}
	}
}

## js-global.router
={
	on:{
		coming(){ }
	}
}

## js-global
var ModuleExampleList = sf.model('module-example-list', function(My){
	My.list = EditorHeader._moduleExampleList;
	My.urlInput = '';
	My.urlValidity = 'valid';

	My.on$urlInput = function(now){
		if(now && !/(?<=github\.com\/).*?\/./.test(now) && !/npmjs\.com\/package\//.test(now))
			My.urlValidity = 'invalid';
		else My.urlValidity = 'valid';
	}

	init();
	function init() {
		let cache = localStorage.bpModuleExampleList;
		if(!cache) return;

		My.list.push(...JSON.parse(cache));
	}

	My.open = function(x) {
		sf.model('module-example-list-deep').openModal(x);
		Modal.goto('/module-example-list-deep');
	}

	My.add = function(packageName, list, packageURL){
		let ref = My.list;
		for (var i = 0; i < ref.length; i++) {
			if(ref[i].packageName === packageName) break;
		}

		// new example
		if(i === ref.length){
			ref.push({
				packageName,
				packageURL,
				npmExamples: list,
				ghExamples: [],
			});

			My.list = ref = ref.sort((a, b) => a.packageName.localeCompare(b.packageName));

			try{
				// This may give error if this modal was never been opened since startup
				ref.refresh();
			} catch(e){}

			SmallNotif.add(`"${packageName}" example has been added`, 'green');
		}
		else ref[i].npmExamples = list;

		localStorage.bpModuleExampleList = JSON.stringify(My.list);
	}

	My.replacePackageExample = function(packageJSON, npmExample, ghExample, ghPackageTag){
		let packageName = packageJSON.name;
		let packageURL = `https://cdn.jsdelivr.net/npm/${packageName}@${packageJSON.version}`;
		let githubURL = (packageJSON.repository?.url ?? '').replace(/\.git$/m, '');
		let ghPackageURL = `https://cdn.jsdelivr.net/gh/${ghPackageTag}`;

		let list = My.list;
		for (var i = 0; i < list.length; i++) {
			let ref = list[i];
			if(ref.packageName === packageName){
				ref.npmExamples = npmExample;
				ref.ghExamples = ghExample;
				ref.packageURL = packageURL;
				ref.githubURL = githubURL;
				ref.ghPackageURL = ghPackageURL;
				ref.cacheDate = Date.now();
				break;
			}
		}

		if(list.length === i){
			list.push({
				packageName,
				packageURL,
				githubURL,
				ghPackageURL,
				cacheDate: Date.now(),
				npmExamples: npmExample,
				ghExamples: ghExample,
			});
		}

		localStorage.bpModuleExampleList = JSON.stringify(My.list);
		SmallNotif.add("Example data updated", 'green');

		return list[i];
	}

	My.addExampleFromURL = async function(url){
		if(!url) url = My.urlInput;
		if(!url) throw new Error("URL mustn't be empty");
		let packageJSON;

		// Check for recognized GitHub/NPM URL pattern
		if(/github\.com\//.test(url)){
			let name = url.match(/(?<=github\.com\/).*?\/.*?(?=$|.git|\/|\?)/m)[0];
			packageJSON = await $.getJSON(`https://cdn.jsdelivr.net/gh/${name}@main/package.json`);
		}
		else if(/npmjs\.com\/package\//.test(url)){
			let name = url.match(/(?<=npmjs\.com\/package\/).*?(?=$|\?)/m)[0];
			packageJSON = await $.getJSON(`https://cdn.jsdelivr.net/npm/${name}@latest/package.json`);
		}
		else{
			SmallNotif.add("URL is not recognized as GitHub repository or NPM registry");
			throw new Error("URL is not recognized as GitHub repository or NPM registry");
		}

		if(navigateIfExist(packageJSON.name)) return;

		if(packageJSON.dependencies?.['@blackprint/engine'] == null && packageJSON.devDependencies?.['@blackprint/engine'] == null){
			SmallNotif.add("Package is not recognized as Blackprint module, as @blackprint/engine was not exist in dependencies or devDependencies");
			throw new Error("Package is not recognized as Blackprint module, as @blackprint/engine was not exist in dependencies or devDependencies");
		}

		await sf.model('module-example-list-deep').refreshCache(packageJSON);
		My.urlInput = '';

		navigateIfExist(packageJSON.name);
	}

	function navigateIfExist(packageName){
		let list = My.list;
		for (let i=0; i < list.length; i++) {
			let temp = list[i];
			if(temp.packageName === packageName){
				sf.model('module-example-list-deep').openModal(temp);
				Modal.goto('/module-example-list-deep');
				return true;
			}
		}

		return false;
	}
});