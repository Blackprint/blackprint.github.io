## html
<sf-m name="npm-packages">
	<div class="description">
		Search package on NPM registry
		<i class="{{ loading ? 'fa fa-spinner fa-spin' : '' }}"></i>
	</div>
	<div class="mini-description" title="Please verify the author trustworthiness before using their module. If you're not a developer, always becareful if someone ask you to do something with Blackprint, like inputting password or private key.">These modules is contributed by the community <a @click="reportClick">(click to report spam/scam)</a></div>
	<div class="search">
		<input type="text" sf-bind="search" @keyup.Enter="refreshList" placeholder="Search...">
	</div>
	<div class="list">
		<div class="item {{ x.package._active && 'active' }} {{ x.package._update && 'update' }}" sf-each="x in list" @click="open(x.package)">
			<div>
				<div class="title">{{ x.package.name }} <span>(v{{ x.package.version }})</span></div>
				<div class="author">{{ x.package.publisher.username }}</div>
			</div>
			<div>
				<div class="description">{{ x.package.description }}</div>
				<div class="date">{{ x.package.date.split('T')[0] }}</div>
			</div>
		</div>
	</div>
</sf-m>

## scss-global
sf-m[name="npm-packages"] {
	background: #292929;
	border-radius: 10px;
	border: 2px solid black;
	position: relative;
	box-shadow: 0 0 20px 0px white;
	.search-info{
		color: white;
		text-align: center;
		width: 100%;
		margin-bottom: 10px;
	}
	> .mini-description{
		padding: 10px;
		color: grey;
		font-size: 12px;
		margin-top: -20px;
		a{
			color: grey;
			cursor: pointer;
		}
	}
	> .description{
		text-align: center;
		padding: 10px;
		color: white;
		a{
			color: skyblue;
		}
	}
	.search{
		padding: 0 5px;
		input{
			color: #fff;
			background: #0000009e;
			border-radius: 4px;
			padding: 5px;
			margin: 5px;
			border: 1px solid #000;
			width: calc(100% - 22px);
		}
	}
	.list{
		padding: 5px;
		.item{
			color: #fff;
			background: #0000009e;
			cursor: pointer;
			border-radius: 4px;
			padding: 5px;
			margin: 5px;
			border: 1px solid #000;
			&:hover{
				background: #000000de;
			}

			&.active{
				color: gray;
			}

			.title{
				font-weight: bold;
				text-decoration: underline;
			}
			.description{
				font-weight: normal;
			    overflow: hidden;
			    width: calc(100% - 100px);
			    white-space: nowrap;
			    text-overflow: ellipsis;
			}
			.author{
				float: right;
				margin-top: -24px;
			}
			.date{
				float: right;
				vertical-align: middle;
				margin-top: -20px;
			}
		}
	}
}

## js-global
sf.model('npm-packages', function(My){
	let query = 'https://registry.npmjs.org/-/v1/search?text=blackprint%20nodes';
	My.list = [];
	My.search = '';
	My.loading = false;

	My.init = function(){
		My.refreshList();
	}

	My.refreshList = async function(){
		let _query = query;
		if(My.search !== '')
			_query += '%20'+My.search;

		My.loading = true;
		let list = (await $.getJSON(_query)).objects;
		My.loading = false;

		// ToDo: check if version was different with current loaded module
		let temp = Blackprint.modulesURL;
		for(let key in temp){
			for (var i = 0; i < list.length; i++) {
				let item = list[i].package;
				item.description = item.description.replace(/&#39;/g, "'");

				if(key.includes(item.name)){
					item._active = true;
					item._update = Blackprint.utils.packageIsNewer(key, item.name+'@'+item.version);
				}
			}
		}

		My.list = list;
	}

	My.open = async function(pkg){
		My.loading = true;

		// ToDo: do we need to sanitize URL? '-'
		let dirs = await $.getJSON(`https://data.jsdelivr.com/v1/package/npm/${pkg.name}@${pkg.version}`);
		dirs = dirs.files;

		let dist = [];
		let example = [];

		for (var i = 0; i < dirs.length; i++) {
			let dir = dirs[i];
			if(dir.type !== 'directory') continue;

			if(dir.name === 'dist'){
				let temp = dir.files;
				for (var a = 0; a < temp.length; a++) {
					let file = temp[a];
					if(file.type !== 'file') continue;

					let name = file.name;
					if(/\.(map|sf\.mjs|sf\.js|css)$/.test(name))
						continue;

					dist.push({url: `/dist/${name}`});
				}
			}
			else if(dir.name === 'example'){
				let temp = dir.files;
				for (var a = 0; a < temp.length; a++) {
					let file = temp[a];
					if(file.type !== 'file') continue;

					example.push({url: `/example/${file.name}`});
				}
			}
		}

		My.loading = false;
		sf.model('npm-package-info').open(pkg, dist, example);
	}

	My.reportClick = function(){
		// ToDo: for now we will redirect to GitHub issue instead
		window.open('https://github.com/Blackprint/blackprint.github.io/issues/new', '_blank');
	}
});