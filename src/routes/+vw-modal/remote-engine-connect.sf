## html
<sf-m name="modal-remote-engine-connect">
	<div class="description">Please set the remote engine URL</div>
	<div class="note" style="display: {{ url === '' || url === placeholder ? 'none':'' }}" @click="connectDefault">(Click here to connect to default localhost server)</div>
	<div class="text-input">
		<input placeholder="{{ placeholder }}" type="text" sf-bind="url" @keyup.Enter="changeServer(false, true)">
	</div>
	<div class="button-import" @click="changeServer(false, true)">Connect</div>
</sf-m>

## scss-global
sf-m[name="modal-remote-engine-connect"] {
	background: #292929;
	border-radius: 10px;
	border: 2px solid black;
	position: relative;
	box-shadow: 0 0 20px 0px white;
	.description{
		padding: 10px;
		color: white;
	}
	.note{
		text-align: center;
		font-size: 12px;
		padding: 0;
		color: gray;
		margin-top: -10px;
		cursor: pointer;
	}
	.text-input{
		padding: 10px;
		position: relative;
		display: flex;

		input{
			width: 100%;
			border: 1px solid black;
			background: #161616;
			padding: 5px;
			color: white;
			outline: none;
		}
	}
	.button-import{
		position: relative;
		border-radius: 10px;
		background: #125c15;
		border: 1px solid #65a122;
		margin: 0 auto 5px auto;
		width: 120px;
		padding: 7px 10px;
		text-align: center;
		cursor: pointer;
		color: white;
		&:hover{
			background: #65a122;
			box-shadow: 0 0 9px #c6ebbd;
		}
	}
}

## js-global.router
={
	on:{
		coming(){
			setTimeout(()=> {
				sf.model('modal-remote-engine-connect').$el('input').focus();
			}, 500);
		},
		showed(){
			setTimeout(()=> {
				sf.model('modal-remote-engine-connect').$el('input').focus();
			}, 100);
		},
	}
}

## js-global
sf.model('modal-remote-engine-connect', function(My){
	My.which = 'engine'; // constant
	My.url = localStorage.BPRemoteEngine ??= "";
	My.placeholder = 'http://localhost:2345';
	My.allowModuleSync = true;
	My.allowRemoteImport = true;
	My.allowDataOutSync = true;
	My.client = null;
	My.socket = null;

	My.connectDefault = function(){
		localStorage.BPRemoteEngine = My.url = "";
		My.changeServer();
	}

	let isConnectOnStartup = false;
	My.changeServer = async function(clearOnFail, isStartupConnect){
		let url = My.url;
		if(!url) url = My.placeholder;

		if(window.io == null){
			sf.loader.js(['https://cdn.socket.io/4.6.1/socket.io.min.js']);
			await sf.loader.task;
		}

		let instance = window.SketchList[0];
		let client = My.client ??= new Blackprint.RemoteControl(instance);
		My.client.enable?.();
		My.socket?.destroy();

		let parsedURL = new URL(url);
		let socket = My.socket = io(parsedURL.origin, {
			transports: ['websocket'],
			path: parsedURL.pathname === "/" ? '/socket.io' : parsedURL.pathname,
			parser: window._SocketIOParser,
		});

		SmallNotif.add("Connecting to remote engine");
		socket.on('startup-time', time => {
			if((Date.now() - time) < 10e3) // younger than 10 sec
				client.sendSketchToRemote();
			else {
				client.importRemoteJSON();
				client.once('empty.json.import', function(){
					client.sendSketchToRemote();
				});
			}
		});

		socket.on('puppetnode.answer', (data)=> {
			Blackprint.PuppetNode.setRegisteredNodes(data);
			Blackprint.emit('bp_editorNodeAvailability');
		});

		client.on('disabled', ()=> SmallNotif.add("Remote sync was disabled", 'red'));
		client.on('remote-save.begin', function(){
			SmallNotif.add('Sketch saved on remote');
		});

		// instance.syncDataOut = false;
		instance.disablePorts = true;

		// Allow import/module sync
		client.onImport = v=> My.allowRemoteImport;
		client.onModule = v=> My.allowModuleSync;

		socket.on('relay', v => client.onSyncIn(v));
		client.onSyncOut = v => socket.emit('relay', v);

		if(Modal.showed && Modal.views.currentPath === '/remote-engine-connect')
			Modal.hide();

		setTimeout(()=> {
			if(socket.connected) return;
			console.log("Failed to connect to remote engine:", url);
			SmallNotif.add("Failed to connect to remote engine", "red");
			socket.destroy();

			// Unset the value if this was failing on startup time
			if(clearOnFail)
				localStorage.BPRemoteEngine = "";
		}, 8000);

		socket.on('disconnect', ()=> SmallNotif.add("Disconnected from remote engine"));
		socket.on('connect', function(){
			console.log("Connected to remote engine:", url);
			SmallNotif.add("Connected to remote engine", "green");
			localStorage.BPRemoteEngine = url;

			if(isStartupConnect === true){
				isStartupConnect = false;
				Modal.goto('/remote-sync');
			}
		});
	}

	if(My.url !== '' && Blackprint.RemoteControl != null){
		$(() => setTimeout(()=> My.changeServer(true, true), 200));
	}
});