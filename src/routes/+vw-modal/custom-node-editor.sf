## html
<sf-m name="custom-node-editor">
	<div class="editor" @keydown.ctrl.Enter.prevent="run">
		<div class="bp-loading-status" style="color: white; padding: 20px">Loading Monaco Editor...</div>
	</div>
	<div class="menu">
		<div class="item" @click="run" title="Execute (Ctrl + Enter)"><i class="fa fa-play"></i></div>
		<!-- <div class="item" @click="Modal.hide()" title="Minimize"><i class="fa fa-window-minimize"></i></div> -->
		<div class="item" @click="close" title="Close"><i class="fa fa-times"></i></div>
	</div>
</sf-m>

## scss-global
sf-m[name="custom-node-editor"] {
	background: #292929;
	border-radius: 10px;
	border: 2px solid black;
	position: relative;

	.editor{
		width: 80vw;
		max-width: 900px;
		height: 90vh;
	}

	.menu{
		position: absolute;
		right: 0px;
		top: 0;
		text-align: center;
		.item{
			cursor: pointer;
			padding: 5px;
			width: 20px;
			height: 20px;
			margin: 10px;
			border: 1px solid #000;
			border-radius: 20px;
			background: #000000a8;
			color: #fff;
			box-shadow: 0 0 5px black;
		}
	}
}

## js-global.router
={
	on:{
		showed(){
			let model = sf.model('custom-node-editor');
			model.recreate();
		}
	}
}

## js-global
sf.model('custom-node-editor', function(My){
	My.content = '// After execute this, you can test it by connecting\n// Input -> Slider and Logger to this node\n\nlet EventSlot = {slot: \'my-unique\'}; // To avoid duplicate listener\n\nBlackprint.registerNode(\'Test/Hello\',\nclass extends Blackprint.Node {\n\tstatic input = { // Port\n\t\t\'Give Input\': Number\n\t}\n\t\n\tstatic output = { // Port\n\t\tOut: Number\n\t}\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\t// You can remove this if you want to use default node interface/HTML\n\t\tlet iface = this.setInterface(\'BPIC/Test/Hello\');\n\n\t\tiface.title = \'Add +5\';\n\t\tiface.description = \'Add 5 to any number\';\n\t}\n});\n\n// You can remove this if you\'re using default node interface/HTML\nBlackprint.Sketch.registerInterface(\'BPIC/Test/Hello\', {\n\thtml: `\n<div class="node {{ type || \'general\' }}" style="transform: translate({{ x }}px, {{ y }}px)">\n  <sf-template path="Blackprint/nodes/template/header.sf"></sf-template>\n\n  <div class="content">\n\t<div class="left-port">\n\t  <sf-template path="Blackprint/nodes/template/input-port.sf"></sf-template>\n\t</div>\n\t\n\t<div style="display: inline-block; color: yellow">\n\t\t{{ log }}\n\t</div>\n    \n\t<div class="right-port">\n\t  <sf-template path="Blackprint/nodes/template/output-port.sf"></sf-template>\n\t</div>\n  </div>\n</div>`\n}, class extends Blackprint.Interface {\n\tconstructor(node){\n\t\tsuper(node);\n\n\t\tthis.log = 0;\n\t}\n\n\t// HTML/Interface Init\n\tinit(el){\n\t\tlet iface = this;\n\t\t\n\t\tconst {\n\t\t\tIInput, IOutput, // Port interface (event, utils, etc)\n\t\t\tInput, Output, // Node Port (get/set value)\n\t\t} = iface.ref;\n\n\t\tIInput[\'Give Input\'].on(\'value\', EventSlot, function({ cable }){\n\t\t\tlet val = cable.value;\n\n\t\t\tiface.log = val + 5; // Give Input -> {{ log }}\n\t\t\tOutput.Out = val + 5; // Give Input -> Out\n\t\t});\n\t}\n\n\t// Run init again to hot reload this node\n\thotReloaded(){\n\t\tthis.init();\n\t}\n\n\t// When this node UI was cloned somewhere\n\t// You can reinit some HTML element if needed\n\tinitClone(el){}\n});';

	My.init = async function(){
		if(window.monaco === void 0){
			await sf.loader.js(['https://cdn.jsdelivr.net/npm/@monaco-editor/loader@1.2.0/lib/umd/monaco-loader.min.js']);
			await monaco_loader.init();
		}

		My.container = My.$el('.editor');
		My.recreate();
	}

	My.recreate = function(){
		if(window.monaco === void 0) return;
		if(My.editor) return;

		My.editor && My.editor.dispose();

		setTimeout(()=> {
			let statusEl = My.container.find('.bp-loading-status');

			My.editor = monaco.editor.create(My.container[0], {
				value: My.content,
				language: 'javascript',
				theme: 'vs-dark',
				minimap: { enabled: false }
			});

			statusEl.css('display', 'none');
		}, 1000);
	}

	My.run = function(){
		eval(My.editor.getValue());
	}

	My.setValue = function(code){
		if(My.editor != null)
			My.editor.setValue(code);

		My.content = code;
	}

	My.close = function(){
		Modal.hide();

		// My.editor.dispose();
		// My.editor = null;
		// modal.goto('/');

		// My.container.find('.bp-loading-status').css('display', '');
	}
});