## html
<sf-m name="module-url">
	<div class="head">
		<div class="row url">Shortened Module URL</div>
		<div class="row nodes">Nodes</div>
		<div class="row actions">Actions</div>
	</div>
	<div class="content">
		<div>
			<div class="row" sf-each="x in list">
				<div class="column url"><div>
					<b>{{ shortenLink(x._url, 'host') }}</b>
					{{ shortenLink(x._url, 'path') }}
					<b>{{ shortenLink(x._url, 'search') }}</b>
					<a title="Right click to copy link address, click to open on new tab" target="_blank" href="{{x._url}}"><i class="fa fa-link"></i></a>
				</div></div>
				<div class="column nodes">
					{{ x._nodeLength }}
				</div>
				<div class="column actions">
					<button title="Show this module on dropdown/module list" @click="hideFromURL(x)">
						 <i class="fa fa-list"></i>
						 <i class="fa fa-slash" style="
						    position: absolute;
						    margin-left: -15px;
						    display: {{ x._hidden ? 'inline-block' : 'none' }}
						"></i>
					</button>
					<button title="Reload this module again from URL" @click="reloadURL(x)">
						<i class="fa fa-sync"></i>
					</button>
					<button title="Remove any related nodes and also remove this module" @click="deleteFromURL(x)">
						<i class="fa fa-trash"></i>
					</button>
				</div>
			</div>
		</div>
		<div class="row">
			<input class="column url-input" type="text" @keyup.Enter="addURL()" sf-bind="newURL" placeholder="Add module from URL here... (Then press enter)">
		</div>
	</div>
	<div class="menu">
		<div class="item" @click="close" title="Close"><i class="fa fa-times"></i></div>
		<div class="item" @click="npmList" title="Search from NPM"><i class="fa fa-book-open"></i></div>
	</div>
</sf-m>

## scss-global
sf-m[name="module-url"] {
	background: #292929;
	border-radius: 10px;
	border: 2px solid black;
	position: relative;
	min-width: 600px;

	.head{
		letter-spacing: 1px;
		text-align: center;
		display: flex;
		background: #00000040;
		.row{
			color: #fff;
			display: inline-block;
			outline: 1px solid #000;
			cursor: default;
			&.url{
				width: 58%;
			}
			&.nodes{
				width: 19%;
			}
			&.actions{
				width: 22%;
			}
		}
	}

	.content{
		.row{
			background: #00000094;
			display: flex;
			.column{
				color: #fff;
				display: inline-block;
				width: 50%;
				padding: 8px;
				outline: 1px solid #000;
				&.url{
					width: 60%;
					overflow: hidden;
					white-space: nowrap;
					margin-bottom: -10px;
					height: 20px;
					font-size: 14px;
					b{
						margin-right: 4px;
						color: #696969;
					}
					div{
						overflow-x: scroll;
						padding-bottom: 10px;
					}
				}
				&.nodes{
					width: 17.5%;
				}
				&.actions{
					width: 22%;
				}
				&.url-input{
					width: 100%;
					color: gray;
					background: #00000094;
					border: none;
				}
			}
		}
		.actions{
			button{
				border: 0;
				background: none;
				color: #fff;
				display: inline-block;
				cursor: pointer;
			}
			.cross{
				text-decoration: line-through;
			}
		}
	}

	.menu{
		position: absolute;
		right: -5px;
		top: -10px;
		text-align: center;
		.item{
			cursor: pointer;
			padding: 5px;
			width: 20px;
			height: 20px;
			margin: 10px;
			border: 1px solid #000;
			border-radius: 20px;
			background: #000000a8;
			color: #fff;
			box-shadow: 0 0 5px black;
		}
	}
}

## js-global
sf.model('module-url', function(My){
	My.list = Blackprint._modulesURL;
	My.newURL = '';

	My.init = async function(){
		// First initialization cycle
	}

	My.shortenLink = function(url, which){
		url = new URL(url);

		if(which === 'search')
			return url.search;

		if(which === 'host')
			return url.host || location.host;

		return url.pathname.replace(/(cjs|mjs|dist)\/|\.(min|mjs|js)/g, '').split('/').slice(-2).join('/');
	}

	My.addURL = function(){
		let list = My.list;

		for (var i = 0; i < list.length; i++) {
			let temp = list[i];
			if(My.newURL === temp._url)
				return;

			if(My.newURL.replace(/\?.*?$/m, '') === temp._url.replace(/\?.*?$/m, '')){
				temp._url = My.newURL.replace(/\?.*?$/m, '');
				Blackprint.loadModuleFromURL(temp._url);
				My.newURL = '';
				return;
			}
		}

		let url = My.newURL.replace(/\?.*?$/m, '') + '?'+ (Date.now()/1000|0);
		My.newURL = '';

		Blackprint.loadModuleFromURL(url, {
			loadBrowserInterface: true // Also load the related .sf.js and .sf.css if exist
		});
	}

	My.reloadURL = function(item){
		if(/\?[0-9]/.test(item._url))
			item._url = item._url.replace(/\?([0-9]+)/, (full, num) => '?'+(1+Number(num)));
		else if(item._url.includes('?'))
			item._url = item._url.replace(/\?.*?$/m, '')+'?1';
		else item._url += '?1';

		Blackprint.loadModuleFromURL(item._url);
	}

	My.hideFromURL = function(item){
		let url = item._url.replace(/\?.*?$/m, '');
		let temp = Blackprint.modulesURL[url];

		let hidden = item._hidden = !item._hidden;

		diveModuleURL(temp, function(deepObject, deepProp, keys, bubble){
			deepObject[deepProp].hidden = hidden;

			// Bubbling check if the parent has no child anymore
			for (var i = bubble.length-1; i >= 0; i--) {
				let ref = bubble[i];

				if(--ref.val._visibleNode <= 0){
					if(i === 0){
						Blackprint.nodes[keys[0]].hidden = hidden;
						break;
					}

					let parent = bubble[i-1];
					parent.val[ref.key].hidden = hidden;
				}
				else break;
			}
		});
	}

	My.deleteFromURL = function(item){
		let list = My.list;
		var index = list.indexOf(item);

		if(index === -1) return;
		let url = item._url.replace(/[?#].*?$/m, '');

		diveModuleURL(Blackprint.modulesURL[url], function(deepObject, deepProp, keys, bubble){
			delete deepObject[deepProp];

			// Bubbling check if the parent has no child anymore
			for (var i = bubble.length-1; i >= 0; i--) {
				let ref = bubble[i];

				if(--ref.val._length <= 0){
					if(i === 0){
						delete Blackprint.nodes[keys[0]];
						break;
					}

					let parent = bubble[i-1];
					delete parent.val[ref.key];
				}
				else break;
			}
		});

		let styles = document.styleSheets;
		let simplifiedURL = url.replace(/\.(sf|js|css|min|mjs)/g, '');

		for (var i = 0; i < styles.length; i++) {
			let style = styles[i];
			if(style.href == null) continue;

			let temp = style.href.replace(/[?#].*?$/m, '').replace(/\.(sf|js|css|min|mjs)/g, '');
			if(temp === simplifiedURL){
				style.ownerNode.remove();
				break;
			}
		}

		delete Blackprint.modulesURL[url];
		list.splice(index, 1);
	}

	function diveModuleURL(moduleInfo, onBubbling){
		that:for(let key in moduleInfo){
			if(key.slice(0, 1) === '_')
				continue;

			key = key.split('/');
			let prop = key.pop();

			// Dive
			let obj = Blackprint.nodes;
			let bubble = new Array(key.length);
			for (var i = 0; i < key.length; i++){
				let k = key[i];
				obj = obj[k];
				bubble[i] = {key:k, val:obj};
				if(obj == null) continue that;
			}

			onBubbling(obj, prop, key, bubble);
		}
	}

	My.npmList = function(){
		modal.goto('/npm-packages');
	}

	My.close = function(){
		Modal.hide();
		modal.goto('/');
	}
});