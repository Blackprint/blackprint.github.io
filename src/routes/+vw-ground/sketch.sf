## html
<sf-m name="sketch-pages">
	<!-- /src/routes/+vw-ground/sketch.sf -->
	<vw-page></vw-page>

	<div class="mini-blackprint disable-effect {{ miniViewer.topRightHidden && 'hidden' }}">
		<!-- Will be replaced with element returned by Blackprint.cloneContainer(true) -->
		<sf-slot for="miniViewer.topRight"></sf-slot>
	</div>
</sf-m>

## js-global.router
={
	on:{
		showed(){
			// Show sketch options
			sf.model('header').showOptions = true;
		},
		hidden(){
			sf.model('header').showOptions = false;
		}

		/*
		showed: Sketch container have been loaded,
		coming: The cable would have wrong position because the DOM still hidden,
		leaving: Maybe we can uninitialize something,
		hidden: Animate something maybe
		*/
	}
}

## scss-global
vw-page{
	position: absolute;
	height: 100%;
	width: 100%;

	&.page-current{
		top: 0;
	}
}
.mini-blackprint{
	width: 240px;
	height: 190px;
	position: absolute;
	top: 5px;
	right: 0;
	overflow: hidden;
	box-shadow: 0 0 6px #ffffff6b;
	background: #ffffff40;
	border-radius: 10px;
	pointer-events: none;

	&.hidden{
		display: none;
	}
}

## js-global
sf.model('sketch-pages', function(My){
	My.miniViewer = {
		topRight: null,
		topRightHidden: true,
		on$topRight(now){
			if(now === null)
				return My.miniViewer.topRightHidden = true;

			My.miniViewer.topRightHidden = false;
			// now => <sf-space>
			// $(now)
		}
	};

	if(My._eventOnce == null){
		My._eventOnce = true;

		$(window).on('keydown', async (ev) => {
			// Skip textbox/input element
			if(ev.target.tagName !== 'BODY') return;

			let pageIndex = views.currentPath.match(/\/sketch\/([0-9]+)/)?.[1];
			if(pageIndex == null) return;

			let sketch = SketchList[pageIndex-1];
			let container = sketch.scope('container');

			// Skip if no selected nodes/cables
			if(container.nodeScope.selected.length === 0
			&& container.cableScope.selected.length === 0){
				return;
			}

			// Currently we only support copy/paste/delete for nodes
			if(container.nodeScope.selected.length === 0) return;

			if(ev.key === 'Delete'){
				let selected = container.nodeScope.selected;

				for(let i=0; i<selected.length; i++)
					sketch.deleteNode(selected[i]);
			}

			if(ev.ctrlKey && ev.key === 'c'){
				let data = sketch.exportJSON({selectedOnly: true});

				// Reduce nodes position
				data = JSON.parse(data);

				console.log(data);

				navigator.clipboard.writeText(JSON.stringify(data));
			}

			if(ev.ctrlKey && ev.key === 'v'){
				let data = await navigator.clipboard.readText();
				data = JSON.parse(data);

				// Reposition the nodes near the pointer or current container

				sketch.importJSON(data, {appendMode: true});
				
			}
		});
	}
});