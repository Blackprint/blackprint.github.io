## html
<sketch-page>
	<div class="bottom-message">This editor still in development (≧▽≦)／<br>
I want to make it better and easier to use.<br>
Please use right click to open drop down menu for the cable, node, container, or port.</div>

	<!-- This element will be replaced with 'My.space' -->
	<sf-slot for="space"></sf-slot>
</sketch-page>

## scss-global
sketch-page{
	.bottom-message{
		position: absolute;
		bottom: 0;
		color: #ababab;
		width: 100%;
		padding: 20px;
		text-align: center;
	}

	sf-space[blackprint] .bg-tile{
		background: url('/assets/img/background/tile.png');
		background-size: 100px;
		filter: brightness(38%);
		opacity: 0.5;
		width: 100%;
		height: 100%;
		position: absolute;
	}
}

## js-global.router
={
	on:{
		coming(data){ // data === views.data
			console.log("Sketch page data:", data);
			let sketch = SketchList[data.page - 1];

			sf.model('header').cloneActive = sketch.page.cloneActive;
		},
		showed(){
			setTimeout(()=> {
				if(SketchList.length === 1 && SketchList[0].ifaceList.length === 0){
					if(SketchList[0].__importing) return;
					Modal.goto('/example-list');
				}
			}, 100);

			$('body > .background .tile').css('display', 'none');
		},
		leaving(){
			console.log("Leaving from sketch page data:", arguments);
			$('body > .background .tile').css('display', '');
		}
	}
}

## js-global
// Blackprint.space = Space (https://github.com/ScarletsFiction/ScarletsFrame/wiki)
// sketch.scope = shortcut to obtain your model scope/context
var SketchList = [];
sf.component('sketch-page', function(My){
	// URL: #page/sketch/{data.page}
	let sketch = My.sketch = SketchList[views.data.page - 1] ??= new Blackprint.Sketch();
	sketch.page = My;

	// Please use sketch.on('...', callback) instead
	// This is used if no one listened to the event
	sketch._event.$_fallback = BlackprintEventFallback;

	sketch.settings('visualizeFlow', true);
	My.space ??= sketch.cloneContainer();

	let SketchPages = sf.model('sketch-pages');
	let container = sketch.scope('container');
	let header = sf.model('header');

	container.onScale = function(scale){
		header.info.scale = Math.round(scale * 100);
	}

	// Will run when <sketch-page> inserted on DOM
	My.init = async function(){
		let sfm = $(My.space.firstElementChild);
		if(!sfm.eq(0).hasClass('bg-tile')){
			sfm.prepend('<div class="bg-tile"></div>');
		}
	}

	My.importJSON = json => sketch.importJSON(json);
	My.clearNodes = ()=> sketch.clearNodes();

	My.cloneActive = false;
	My.cloneContainer = function(){
		My.cloneActive = !My.cloneActive;

		if(My.cloneActive){
			if(My.switchVFXActive === false)
				My.switchVFX();

			// Reset current container view
			var container = sketch.scope('container');
			container.pos.x = 0;
			container.pos.y = 0;
			container.scale = 1; // 100% scale

			var mini;
			if(container.minimap)
				mini = container.minimap;
			else{
				mini = sketch.cloneContainer(true); // Clone and get the MiniMap

				// Remove the dropdown from minimap
				$('sf-m[name="dropdown"]', mini).remove();
			}

			// Clone into new window
			new sf.Window({
				title: "Cloned Sketch Container",
				templateHTML: sketch.cloneContainer() // Clone 2
			}, refreshViewport);

			// Put the mini container into DOM
			SketchPages.miniViewer.topRight = mini;

			// Refresh mini viewport size
			// I put it like this for a reason
			refreshViewport();
			function refreshViewport(){
				setTimeout(function(){
					container.pos.x = -0.1;
					setTimeout(function(){
						container.pos.x = 0;
					}, 500);
				}, 1000);
			}
		}
		else{
			SketchPages.miniViewer.topRight = null;
			sf.Window.destroy();
		}
	}

	sketch.on('node.menu', function({ iface, menu }){
		menu.unshift({
			title: !iface.id ? "Add ID" : "Modify ID",
			async callback(){
				let val = await Swal.fire({
					title: "Write the new ID here",
					text: (iface.id ? "Current ID: "+iface.id : void 0),
					input: "text",
				});

				if(val.isConfirmed === false) return;
				iface.id = val.value;
			}
		});
	});
});