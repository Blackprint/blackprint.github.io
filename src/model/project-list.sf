## html
<sf-m name="project-list">
	<div class="list" title="Use Alt + 1/2/3 to switch between tab, Alt + W to close">
		<div class="item {{ x.active && 'active' }}" sf-each="x in list" @contextmenu.prevent="openMenu(event, x)">
			<i class="fa fa-sticky-note"></i>
			<span @click="switchTab(x)" title="{{ x.tooltip || '' }}">{{ x.title }}</span>
			<i class="fa fa-{{ x.isUnsaved ? 'circle' : 'times close' }}" @click="closeTab(x)"></i>
		</div>
	</div>
	<div class="create-tab" @click="createTab"><i class="fa fa-plus"></i></div>
</sf-m>

## scss-global
sf-m[name="project-list"] {
	align-self: baseline;
	display: flex;
	flex-wrap: wrap;
	width: calc(100vw - 500px);
	max-height: 50px;
	overflow: auto;

	.list .item {
		position: relative;
		display: inline-flex;
		flex: 1 1;
		background: #ffffff14;
		border-right: 1px solid #ffffff1a;
		border-bottom: 1px solid #ffffff1a;
		cursor: pointer;
		padding: 1px 10px;
		height: 22px;
		// flex-grow: initial;
		max-width: 150px;
		i {
			font-size: 12px;
			align-self: center;
		}
		.fa-circle, .close {
			position: absolute;
			right: 3px;

			&:hover{
				background: #ffffff47;
				color: #ffffffb5;
				border-radius: 100%;
			}
		}
		.fa-circle{
			font-size: 9px;
			margin: 0 3px 0 0;
			padding: 0;
		}
		.close{
			padding: 3px 4px 2px 4px;
		}
		span {
			margin-left: 5px;
			font-size: 13px;
			padding-right: 20px;
			padding-top: 3px;
		}
		&.active {
			background: #ffffff24;
			color: #ffffffd1;
		}
	}

	.create-tab{
		margin: 3px 3px 0px 5px;
		cursor: pointer;
		vertical-align: middle;
		// display: inline-flex;
		// margin: 1px 3px 0px 5px;
		&:hover {
			color: white;
		}
	}
}

## js-global
sf.model("project-list", My => {
	My.list = [{active: true, title: 'Untitled-1', id: '1', isUnsaved: false, currentRoute: '/sketch/1'}];
	My.uniqId = 2;

	My.init = function(){
		views.goto('/sketch/1');
		My.storeCurrentSketchToTab(My.list[0], '1');

		// Avoid closing page when there are unsaved changes
		window.addEventListener("beforeunload", ev => {
			// Check for any unsaved tab
			let list = My.list;
			let hasUnsaved = false;
			for (let i=0; i < list.length; i++) {
				if(list[i].isUnsaved){
					hasUnsaved = true;
					break;
				}
			}

			if(!hasUnsaved) return;
			ev.preventDefault();
			return (ev.returnValue = "You have unsaved changes, are you sure to close this tab?");
		}, { capture: true });
	}

	My.storeCurrentSketchToTab = function(tab, i){
		setTimeout(() => {
			let pageIndex = CurrentSketch.page.$el.parent()[0].routerData.page;
			if(i !== pageIndex) throw new Error("Failed to save sketch page's reference");
			if(tab.sketch === CurrentSketch) return;

			tab.sketch = CurrentSketch;
			CurrentSketch.tabInfo = tab;
			CurrentSketch.emit('editor.tabInfo', tab);

			CurrentSketch.on('cable.connect cable.disconnect node.created node.delete node.move node.id.changed port.default.changed _port.split _port.unsplit _port.resync.allow _port.resync.disallow', tab._needSave = function(){
				tab.isUnsaved = true;
			});
		}, 50);
	}

	My.getActiveTab = function(){
		let tabs = My.list;
		for (let i=0; i < tabs.length; i++)
			if(tabs[i].active) return tabs[i];
	}

	My.createTab = function(){
		let i = '' + (My.uniqId++);
		let tab = {active: false, title: 'Untitled-'+i, id: i, isUnsaved: false, currentRoute: '/sketch/'+i};
		My.list.push(tab);
		My.switchTab(tab);
		My.storeCurrentSketchToTab(tab, i);
		return tab;
	}

	My.switchTab = function(tab){
		let tabs = My.list;
		for (let i=0; i < tabs.length; i++)
			tabs[i].active = false;

		tab.active = true;
		views.goto(tab.currentRoute);
	}

	My.saveTab = async function(tab){
		if(tab == null) return;
		if(tab === true){ // Save current active tab
			let list = My.list;
			for (let i=0; i < list.length; i++) {
				if(!list[i].active) continue;
				tab = list[i];
				break;
			}
		}

		if(!tab.title.includes('.bpi')) tab.title += '.bpi';

		let workspacePanel = sf.model("project-panel-workspace");
		let file = await workspacePanel.resolvePath(EditorWorkingDir.name + '/instances/' + tab.title);

		// Create file if not exist
		if(file == null){
			file = await EditorWorkingDir.createFile('instances/' + tab.title);
			await workspacePanel.rescanFiles();
		}

		await file.writeData(tab.sketch.exportJSON({environment: false}));
		tab.isUnsaved = false;

		let list = My.list;
		let _list = [];
		for (let i=0; i < list.length; i++) {
			if(list[i].title.endsWith('.bpi')) _list.push(list[i].title);
		}

		SmallNotif.add("Instance file saved to workspace", 'green');

		if(_list.length === 0) return;
		workspacePanel.setSetting('opened_instances', _list);
	}

	My.openMenu = function(ev, tab){
		DropDown.show([{
			title: 'Rename',
			async callback(){
				let itemName = tab.title;
				let extIndex = itemName.lastIndexOf('.bpi');
				if(extIndex === -1) extIndex = itemName.length;

				let val = await Swal.fire({
					title: "Rename to:",
					text: itemName.slice(0, extIndex),
					input: "text",
				});

				val = val.value;
				if(!val) return;

				val = val + (val.slice(-4) != '.bpi' ? '.bpi' : '');
				tab.title = val;

				// Don't save as file if no workspace loaded
				if(EditorWorkingDir == null) return;

				let workspacePanel = sf.model("project-panel-workspace");
				let path = EditorWorkingDir.name + '/instances/' + itemName;

				// Create file if not exist
				if(await workspacePanel.resolvePath(path) == null){
					await EditorWorkingDir.createFile('instances/' + val);
					await workspacePanel.rescanFiles();
				}
				else workspacePanel.fileRename(path, val);
			}
		}, {
			title: 'Save',
			callback(){ My.saveTab(tab) }
		}], {x: ev.clientX, y: ev.clientY, event: ev});
	}

	My.closeTab = function(tab, noSwitchTab=false){
		let tabs = My.list;
		let i = tabs.indexOf(tab);
		if(i === -1) return;

		// Remove page and destroy instance
		let pages = [...$('vw-page', views.rootDOM)[0].children];
		let sketch, page;
		for (let i=0; i < pages.length; i++) {
			page = pages[i];
			if(page.routerData.page === tab.id){
				sketch = $('sketch-page', page)[0].model.sketch;
				break
			}
		}

		if(sketch != null){
			if(tab.isUnsaved){
				if(!confirm("Are you sure to close this unsaved instance?"))
					return;
			}

			sketch.destroy();
			page.remove();
		}

		tabs.splice(i, 1);

		if(noSwitchTab) return;
		if(tabs.length === 0) My.createTab();
		else My.switchTab(tabs[0]);
	}
});