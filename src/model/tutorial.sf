## html.append-to-body
<sf-m name="tutorial" style="display: {{ active ? 'block' : 'none'}}">
	<div class="highlighter">
		<div class="dark-ground"></div>

		<div>
			<div class="light" sf-each="val in light" style="transform: translate({{ val.position.x }}px, {{ val.position.y }}px);"></div>
		</div>
	</div>

	<div class="hinter">
		<div class="hints" sf-each="val in light" style="transform: translate({{ val.position.x }}px, {{ val.position.y }}px);">
			<div class="light"></div>
			<div class="message" style="transform: translate({{ -val.overflow.x }}px, {{ -val.overflow.y }}px);">{{ val.message }}</div>
		</div>
	</div>
</sf-m>

## scss-global
sf-m[name="tutorial"]{
	$highlightWidth: 500px;
	$highlightHeight: 500px;
	z-index: 10;
	display: none;
 
	@keyframes pulse-ring {
		0% { transform: scale(0.1); }
		80%, 100% { opacity: 0; }
	}
	@keyframes pulse-dot {
		0% { transform: scale(0.7); }
		50% { transform: scale(1); }
		100% { transform: scale(0.7); }
	}

	.highlighter{
		z-index: 5;
		position: fixed;
		top: 0;
		left: 0;
		mix-blend-mode: multiply;
		pointer-events: none;
		.dark-ground{
			position: fixed;
			width: 100vw;
			height: 100vh;
			background: rgba(0,0,0,0.8);
		}
		.light{
			position: fixed;
			width: $highlightWidth;
			height: $highlightHeight;
			margin-left: calc(-1 * $highlightWidth / 2);
			margin-top: calc(-1 * $highlightHeight / 2);
			border-radius: 100%;
			background: radial-gradient(circle, rgba(255,255,255,1) 0%, rgba(255,255,255,0.8) 8%, rgba(255,255,255,0.7) 15%, rgba(255,255,255,0.5) 30%, rgba(255,255,255,0) 60%);
		}
	}
	.hinter .hints{
		position: fixed;
		top: 0;
		left: 0;
		width: 500px;
		pointer-events: none;
		z-index: 10000;
		.light{
			position: fixed;
			width: 10px;
			height: 10px;
			margin-left: -5px;
			margin-top: -5px;
			&:before {
				content: "";
				position: relative;
				display: block;
				width: 500%;
				height: 500%;
				margin-left: -200%;
				margin-top: -200%;
				border-radius: 45px;
				background-color: #01a4e9;
				animation: pulse-ring 1.5s cubic-bezier(0.215, 0.61, 0.355, 1) infinite;
			}
			&:after {
				content: "";
				position: absolute;
				top: 0;
				display: block;
				width: 100%;
				height: 100%;
				background-color: #ffffff69;
				border-radius: 15px;
				box-shadow: 0 0 8px black;
				animation: pulse-dot 1.5s cubic-bezier(0.455, 0.03, 0.515, 0.955) -0.4s infinite;
			}
		}
		.message{
			position: fixed;
		    font-size: 16px;
		    color: white;
		    background: #000000bd;
		    border: 2px solid #0089ffe3;
		    border-radius: 10px;
		    padding: 4px 8px;
		    box-shadow: 0 0 8px #000000;
		    margin-left: 25px;
		}
	}
}

.bp-editor-tutorial-active-element {
    filter: drop-shadow(0 0 12px yellow);
}

## js-global
window.Tutorial = sf.model('tutorial', My => {
	My.light = [];
	My.pending = [];
	My.active = false;

	/* data = [
		{message, position:{x, y}, onShow(){}, onLeave(){}}, // use XY
		{message, element, origin: 'center'}, // use element position
		{message, element, onEvent(){}, listenEvent: 'pointerup'}, // add event callback
		[{message, position:{x, y}}, {message, element:{x, y}}] // multiple highlight [ToDo]
	] */
	My.loadTutorial = function(data){
		if(!(data instanceof Array))
			throw new Error("Tutorial must be an array");

		// Make sure container element always on front
		$(document.body).append(My.$el[0]);

		My.pending = data.slice(0);
	}

	// Immediately show a highlight and clear previous tutorial
	My.show = function(data){
		My.pending = [data];
		My.next();
	}

	My.addTutorial = function(...data){
		My.pending.push(...data);
	}

	My.next = async function(){
		// ToDo: optimize code below for multiple highlight
		let old = My.light[0];
		if(old != null){
			old.onLeave?.();
			unregisterEventListener(old);
		}

		if(My.pending.length === 0){
			My.light.splice(0);
			My.active = false;
			return;
		}

		let data = My.pending.shift();

		if(data.delayShow != null){
			My.active = false;
			await new Promise(resolve => setTimeout(resolve, data.delayShow));
		}

		if(data.element != null){
			let $el = $(data.element);
			if($el[0] == null){
				SmallNotif.add('Failed to find element "'+data.element+'" for the tutorial', 'red');
				return;
			}

			let rect = $el[0].getBoundingClientRect();
			let origin = data.origin || 'center';

			var oX=0,oY=0;
			if(origin === 'top-left') 1;
			else if(origin === 'top-right')
				oX += rect.width;
			else if(origin === 'bottom-left')
				oY += rect.height;
			else if(origin === 'bottom-right')
				oX += rect.width, oY += rect.height;
			else if(origin === 'center')
				oX += rect.width/2, oY += rect.height/2;
			else if(origin === 'center-top')
				oX += rect.width/2;
			else if(origin === 'center-left')
				oY += rect.height/2;
			else if(origin === 'center-right')
				oX += rect.width, oY += rect.height/2;
			else if(origin === 'center-bottom')
				oX += rect.width/2, oY += rect.height;

			let position = data.position = {x: rect.x + oX, y: rect.y + oY};
			let overflow = data.overflow = {x: 0, y: 0};

			setTimeout(()=>{
				let rect = My.$el('.hinter .hints .message')[0].getBoundingClientRect();

				let oX = position.x + rect.width + 50 - window.innerWidth;
				let oY = position.y + rect.height - window.innerHeight;

				if(oY > 0) overflow.y = oY;
				if(oX > 0){
					overflow.x = oX;
					overflow.y = (oY > 0 ? oY : 0) - 20;
				}
			}, 300);

			registerEventListener(data);
		}

		My.light = data.splice != null ? data : [data];
		My.active = true;

		data.onShow?.();
	}

	My.clearTutorial = function(){
		let old = My.light[0];
		if(old != null){
			old.onLeave?.();
			unregisterEventListener(old);
		}

		My.active = false;
		My.light = [];
		My.pending = [];
		My._domObserver?.disconnect();
	}

	My.hotReloaded = function(){
		// My.loadTutorial([{message:"hello\nwodlw", element: '.welcome-text', position:{x:100, y:100}, onShow(){
		// 	$(document.body).once('pointerup', function(){
		// 		My.next();
		// 	});
		// }}]);
		// My.loadTutorial([[
		// 	{message:"hello\nwodlw", position:{x:100, y:100}},
		// 	{message:"aasd\nwodlw", position:{x:500, y:200}},
		// ]]);

		// My.next();
	}

	let eventTest = /^on[A-Z]/m;
	function registerEventListener(obj){
		if(obj.element != null)
			$(obj.element).addClass('bp-editor-tutorial-active-element');

		for(let key in obj){
			if(!eventTest.test(key)) continue;
			if(key === 'onShow' || key === 'onLeave') continue;

			let call = obj[key];
			if(call === 'next') call = My.next;
			$(obj.element).on(key.slice(2).toLowerCase(), call);
		}
	}
	function unregisterEventListener(obj){
		if(obj.element != null)
			$(obj.element).removeClass('bp-editor-tutorial-active-element');

		for(let key in obj){
			if(!eventTest.test(key)) continue;
			if(key === 'onShow' || key === 'onLeave') continue;

			let call = obj[key];
			if(call === 'next') call = My.next;
			$(obj.element).off(key.slice(2).toLowerCase(), call);
		}
	}

	My._domChanged = function(element, callback){
		My._domObserver?.disconnect();

		My._domObserver = new MutationObserver(function(){
			callback();
			My._domObserver.disconnect();
			My._domObserver = null;
		});

		My._domObserver.observe(element, { childList:true, subtree:true });
	}
});