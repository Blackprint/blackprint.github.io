## html
<sf-m name="project-panel-workspace">
	<div class="files-list">
		<div class="title" @click="collapseSubPanel(this, true)"><i class="fa fa-chevron-down collapse-btn"></i> Explorer</div>
		<div class="button" @click="rescanFiles"><i class="fa fa-sync-alt" title="Rescan files"></i></div>

		<!-- /src/component/tree-list.sf -->
		<div class="tree-view" tree-section="files" @dblclick="openFile" @pointerdown="checkDragNode" @pointerover="fileListHover" @pointerleave="fileListLeave" @contextmenu="event.preventDefault()">
			<div class="tree-item collapsed" sf-each="key, val in files"
				style="display: {{ val.hidden ? 'none' : '' }}">
				<div class="title" @click="collapseTree(this)"><i class="fa tree-icon"></i> {{ key }}</div>

				{{@if val.constructor === Object:
					return new $TreeList({ parentKey: '', key, val });
				}}
			</div>
		</div>
	</div>
	<div class="bottom-info info-browser-flag {{ needBrowserFlag ? '' : 'hide' }}">Please enable <b>"File System Access API"</b> flags for your browser chrome://flags</div>
	<div class="bottom-info">Drag and drop a folder to here to use it for your workspace</div>
</sf-m>

## scss-global
sf-m[name="project-panel-workspace"] {
	background: #181818;
	height: 100%;
	.files-list {
		color: #cbcbcb;
		position: relative;
		width: 190px;
		max-height: -webkit-fill-available;
		// border-top: 1px solid #787878a3;
		padding: 5px 5px;
		// border-bottom: 1px dashed white;
		.title, .button{
			display: inline-block;
			cursor: pointer;
			white-space: nowrap;
		}
		& > .title {
			color: #e7e7e7;
    		font-weight: bold;
		}
		.collapse-btn {
			font-size: 14px;
			padding: 2px;
			width: 12px;
		}
		.button{
			margin-right: 10px;
			float: right;
		}
		.tree-view{
			position: relative;
			max-height: calc(100% - 22px);
			max-width: 185px;
			overflow: auto;
			font-size: 14px;
			&.collapsed > .tree-group {
				display: none;
			}
		}
		&.collapsed {
			.tree-view {
				display: none;
			}
		}
	}

	.bottom-info {
		position: absolute;
		bottom: 0;
		text-align: center;
		font-size: 12px;
		padding: 5px;
		color: gray;
		user-select: none;
		&.hide{
			display: none;
		}
	}

	.info-browser-flag{
		bottom: 50px;
		border-bottom: 1px solid #a5a5a536;
	}
}

## js-global
sf.model("project-panel-workspace", My => {
	My._settings = {};
	My.files = {};
	My._utils = {};
	My.needBrowserFlag = DataTransferItem.prototype.getAsFileSystemHandle == null;
	Object.setPrototypeOf(My._utils, Blackprint.Engine.CustomEvent.prototype);

	My.init = function(){
		Events.on('EditorWorkingDirChange', async ()=>{
			await My.cleanWorkspace();
			await My.rescanFiles();
			await My.initAsWorkspace();
		});

		My.$el.on("dragover", ev => ev.preventDefault()).on("drop", async function(ev) {
			ev.preventDefault();

			let item = ev.dataTransfer.items[0];
			if(item.getAsFileSystemHandle == null) return SmallNotif.add("This browser is not supported", 'red');

			let handle = await item.getAsFileSystemHandle();
			if(handle == null) return;
			if(handle.kind !== "directory") alert("Working directory must be a directory");
			else {
				if(window.EditorWorkingDir != null)
					SmallNotif.add("Workspace directory was changed");

				window.EditorWorkingDir = new _CustomDirectory(handle);
				await EditorDB.setSettings("EditorWorkingDir", window.EditorWorkingDir);
				Events.EditorWorkingDirReady = true;
				Events.EditorWorkingDirChange();
			}
		});
	}

	My.cleanWorkspace = async function(){
		let projectList = sf.model("project-list");
		let list = projectList.list;
		for (let i=0; i < list.length; i++) {
			if(list[i].isUnsaved)
				return "You must save/close opened tab before changing the workspace";
		}

		for (let i=list.length-1; i >= 0; i--)
			projectList.closeTab(list[i], true);

		// Create dummy tab
		await projectList.createTab();
	}

	My.initAsWorkspace = async function(){
		// Check if has workspace settings
		let file;
		try{
			file = await EditorWorkingDir.resolveCustomHandle('bp-workspace.json');
		} catch(e) {}

		if(file){
			let val = await Swal.fire({
				title: "Do you want to load and execute this workspace?",
				text: "Make sure you have trusted the author of this workspace because this editor will load and run the opened instance for this workspace",
				showCancelButton: true,
				showCloseButton: true
			});

			let projectList = sf.model("project-list");
			if(!val.isDismissed) {
				// Load local nodes first
				await My.refreshLocalNodes();

				// Then load the instances
				My._settings = JSON.parse(await file.readText());
				let dummyTab = projectList.list[0];

				let opened = My.getSetting(['opened_instances']) ?? [];
				for (let i=0; i < opened.length; i++) {
					let file = await My.resolvePath(EditorWorkingDir.name+`/instances/${opened[i]}`);
					if(!file) continue;

					let tab = projectList.createTab();
					tab.title = opened[i];

					await new Promise(resolve => setTimeout(async () => {
						await tab.sketch.importJSON(await file.readText());
						tab.isUnsaved = false;
						resolve();
					}, 200));
				}

				if(opened.length !== 0) projectList.closeTab(dummyTab);
			}

			return;
		}

		let val = await Swal.fire({
			title: "Do you want to initialize this folder as your workspace?",
			showCancelButton: true,
			showCloseButton: true
		});

		if(val.isDismissed) return;

		await EditorWorkingDir.getDirectory('/instances', true);
		await EditorWorkingDir.getDirectory('/assets', true);
		await EditorWorkingDir.getDirectory('/local_nodes', true);
		await My.saveWorkspaceData();
		await My.rescanFiles();
	}

	My.saveWorkspaceData = async function(){
		let file;
		try {
			file = await EditorWorkingDir.resolveCustomHandle('bp-workspace.json');
		} catch(e) {
			file = await EditorWorkingDir.createFile('bp-workspace.json');
		}

		await file.writeData(JSON.stringify(My._settings));
	}

	My.getSetting = function(name){
		if(name.constructor === String) name = [name];
		return Blackprint._utils.getDeepProperty(My._settings, name);
	}

	My.setSetting = function(name, val){
		if(name.constructor === String) name = [name];
		Blackprint._utils.setDeepProperty(My._settings, name, val);
		My.saveWorkspaceData();
	}

	function compareDir(old, now, path=''){
		for (let key in old) {
			if(now[key] == null) sf.Obj.delete(old, key);
		}

		for (let key in now) {
			if(old[key] == null){
				sf.Obj.set(old, key, now[key]);
				reSort(old);
			}
			else if(old[key].constructor === Object && now[key].constructor === Object)
				compareDir(old[key], now[key], `${path}/${key}`);
		}
	}

	My.rescanFiles = async function(){
		My.directories ??= new WeakMap();
		let cwd = await EditorWorkingDir.recursiveGetFileHandles('.', {}, My.directories);
		let dirs = { [EditorWorkingDir.name]: cwd };

		compareDir(My.files, dirs, EditorWorkingDir.name);
		My._utils.emit('file.change');

		setTimeout(() => {
			let targetEl = My.$el('[tree-section="files"] > .collapsed > .title');
			if(targetEl[0]) My.collapseTree(targetEl[0], true);
		}, 10);
	}

	My.resolvePath = My._utils.resolvePath = function(path){
		let temp = Blackprint._utils.getDeepProperty(My.files, path.split('/'));
		if(temp == null) return null;

		if(temp.constructor === Object) return My.directories.get(temp);
		return temp;
	}

	My.getElementInfo = function(el){
		let $el = $(el);
		let current = $el.parent('.tree-view > .tree-item > tree-list > [tree-item-key]');
		let section = current.attr('tree-item-key');
		let itemEl = $(el.closest('[tree-item-key]') ?? []);
		let key = itemEl.attr('tree-item-key');
		let parent = $el.parent(".tree-item.has-child > tree-list, .tree-view > .tree-item")[0];
		let parentKey = parent.model.parentKey;
		let path = !!parentKey ? (parentKey + '/' + key) : key;

		return { parent, section, itemEl, key, model: itemEl[0]?.model, path, parentKey };
	}

	My.checkDragNode = ev => {
		let focus = ev.target;
		let isItem = true;
		if(focus.nextElementSibling != null) isItem = false;

		let { parent, section, itemEl, key, path: namespace } = My.getElementInfo(focus);
		focus = $(focus);

		if(ev.button === 2){ // If context menu
			My.fileMenu(ev, focus[0], section);
			return;
		}

		// Only handle node creation for assets
		if(section !== 'assets') return;
		if(key == null) return;
		if(parent == null) return;

		let endEvent = ev.pointerType === 'touch' ? 'touchend' : 'pointerup';

		ToolTip.set("Create node");
		$(sf.Window).once(endEvent, async evUp => {
			ToolTip.set();

			let targetEl = evUp.target;
			if(endEvent === 'touchend'){
				let { clientX, clientY } = evUp.changedTouches[0];
				evUp.clientX = clientX;
				evUp.clientY = clientY;
				targetEl = document.elementFromPoint(clientX, clientY);
			}

			if(targetEl.closest('sketch-page') == null) return;
			if(targetEl.closest('sf-m.cables') != null){
				await $.afterRepaint();

				let offset = targetEl.getBoundingClientRect();
				let container = CurrentSketch.scope('container');
				let posX = (evUp.clientX - offset.x) / container.scale;
				let posY = (evUp.clientY - offset.y) / container.scale;
				let nodeOptions = { x: posX, y: posY };

				let menu = [];
				if(section === 'assets'){
					nodeOptions.data = { path: namespace };
					menu = [{
						title: "Get Handle", callback(){
							CurrentSketch.createNode(
								isItem
									? 'BP_Editor/Workspace/Assets/File'
									: 'BP_Editor/Workspace/Assets/Directory'
							, nodeOptions);
						}
					}];
				}
				else return;

				DropDown.show(menu, {x: evUp.clientX, y: evUp.clientY, event: evUp});
			};
		});
	}

	My.collapseSubPanel = (el, isMain) => {
		let temp = $(el);
		let parent = temp.parent();
		parent.toggleClass("collapsed");

		if(!isMain) return;
		// My.recalculateMenu();

		let collapseBtn = temp.find('.collapse-btn').removeClass('fa-chevron-down').removeClass('fa-chevron-right');

		if(parent.hasClass('collapsed'))
			collapseBtn.addClass('fa-chevron-right');
		else collapseBtn.addClass('fa-chevron-down');
	}

	function reSort(obj){
		if(obj._list) obj._list.sort(Intl.Collator().compare);

		let _list = obj._list;
		let files = [];
		for (let i=_list.length-1; i >= 0; i--) {
			let temp = _list[i];
			if(obj[temp].constructor === Object) continue;

			files.unshift(temp);
			_list.splice(i, 1);
		}

		_list.push(...files);
		obj.refresh?.();
	}
	My.collapseTree = function(el){
		el = el.nextElementSibling;
		if(el == null) return;

		let hidden;
		let parent = $(el.parentNode);

		if(parent.hasClass('tree-view') || parent.hasClass('tree-no-model'))
			hidden = !parent.hasClass('collapsed');
		else hidden = el.model.hidden = !el.model.hidden;

		if(hidden)
			parent.addClass("collapsed");
		else {
			if(el.model != null) reSort(el.parentNode.model);
			parent.removeClass("collapsed");
		}
	}

	My.fileMenu = function(ev, el, section){
		let $el = $(el);
		let tree = $el.parents('[tree-item-key]');
		let path = '';

		for (let i=tree.length-1; i >= 0; i--) {
			if(path !== '') path += '/';
			path += $(tree[i]).attr('tree-item-key');
		}

		let itemEl = el.closest('[tree-item-key]');
		if(itemEl == null) {
			DropDown.show([{
				title: "Close this workspace",
				async callback(){
					sf.Obj.delete(My.files, window.EditorWorkingDir.name);
					My.files.refresh();

					window.EditorWorkingDir = null;
					await EditorDB.setSettings("EditorWorkingDir", null);
				}
			}], {x: ev.clientX, y: ev.clientY, event: ev});
			return;
		}

		let itemName = $(itemEl).attr('tree-item-key');
		let model = itemEl.model;

		let menu = [{
			title: "Rename", async callback(){
				let _itemName = itemName;
				if(section === 'instances'){
					let extIndex = itemName.lastIndexOf('.bpi');
					if(extIndex === -1) extIndex = itemName.length;
					itemName = itemName.slice(0, extIndex);
				}
				
				let val = await Swal.fire({
					title: "Rename to:",
					text: itemName,
					input: "text",
				});

				val = val.value;
				if(!val) return;

				// Also rename the tab if exist
				if(section === 'instances'){
					val = val + (val.slice(-4) != '.bpi' ? '.bpi' : '');

					let list = sf.model("project-list").list;
					for (let i=0; i < list.length; i++) {
						if(list[i].title === _itemName){
							list[i].title = val;
							break;
						}
					}
				}

				My.fileRename(path, val);
			}
		}, {
			title: "Delete", async callback(){
				let val = await Swal.fire({
					title: `Are you sure to delete "${itemName}"?`,
					showCancelButton: true,
					showCloseButton: true
				});

				if(val.isDismissed) return;

				if(model.constructor === Object)
					(await EditorWorkingDir.getDirectory(path))?.delete();
				else (await EditorWorkingDir.getFile(path))?.delete();

				await My.rescanFiles();
			}
		}];

		if(itemName === '') menu = [];

		if(model.constructor === Object){
			menu.push(...[{
				title: "New file", async callback(){
					let val = await Swal.fire({
						title: "Create file in:",
						text: path,
						input: "text",
					});

					val = val.value;
					if(!val) return;

					await EditorWorkingDir.createFile(path+'/'+val);
					await My.rescanFiles();
				}
			}, {
				title: "New folder", async callback(){
					let val = await Swal.fire({
						title: "Create folder in:",
						text: path,
						input: "text",
					});

					val = val.value;
					if(!val) return;

					await EditorWorkingDir.getDirectory(path+'/'+val, true);
					await My.rescanFiles();
				}
			}]);
		}

		if(section === 'local_nodes'){
			menu.unshift({
				title: "Rescan and reload",
				callback(){ My.refreshLocalNodes() }
			}, {
				title: "New interface template.sf",
				description: "For browser user interface",
				callback(){ My.refreshLocalNodes() }
			}, {
				title: "New node template.js",
				description: "For Node.js/Deno engine",
				callback(){ My.refreshLocalNodes() }
			});
		}

		DropDown.show(menu, {x: ev.clientX, y: ev.clientY, event: ev});
	}

	My.fileListLeave = ev => { if(ev.pressure === 0) ToolTip.set() };
	My.fileListHover = ev => {
		if(ev.pressure !== 0) return; // Run on hover only, and no button click

		if(!ev.target.classList.contains('title'))
			return ToolTip.set(false);

		let { parentKey, itemEl } = My.getElementInfo(ev.target);
		if(parentKey == null) return ToolTip.set("Current working directory for this workspace");

		parentKey += '/'+itemEl.attr('tree-item-key');
		parentKey = parentKey.split('/').slice(1).join('/');

		if(itemEl.hasClass('has-child')){
			if(parentKey === 'assets')
				return ToolTip.set("You can store project resource here and reference it to current Blackprint instance\nAny drag and dropped file will be placed here");

			if(parentKey === 'instances')
				return ToolTip.set("Blackprint instances will be saved in this folder");

			if(parentKey === 'local_nodes')
				return ToolTip.set("You can create custom node for Blackprint here,\nand this editor will load it for you on workspace init and rescan (by right click this folder)");
		}
		else { // file
			if(parentKey === 'bp-workspace.json')
				return ToolTip.set("Blackprint workspace's settings");
		}

		ToolTip.set(false);
	};

	My.openFile = function(ev){
		let { path, model, section, key } = My.getElementInfo(ev.target);
		if(model == null || model.constructor === Object) return;

		// Load instance in new tab if not opened, switch tab if already opened
		if(section === 'instances'){
			let projectList = sf.model("project-list");
			let list = projectList.list;
			for (let i=0; i < list.length; i++) {
				if(list[i].title === key){
					projectList.switchTab(list[i]);
					return;
				}
			}

			let tab = projectList.createTab();
			tab.title = key;

			setTimeout(async () => {
				let file = await My.resolvePath(path);
				await tab.sketch.importJSON(await file.readText());
				tab.isUnsaved = false;
			}, 200);
		}
	}

	My.fileRename = async function(name, to){
		if(name.startsWith(EditorWorkingDir.name+'/'))
			name = name.replace(EditorWorkingDir.name+'/', '');

		let _path = name.split('/');
		_path.pop(); _path.push(to);
		to = _path.join('/');

		let handle = await EditorWorkingDir.resolveCustomHandle(name);
		await handle.move(to);

		await My.rescanFiles();
	}

	// Do not use this for cryptography/encryption
	async function hashString(str){
		let temp = '';
		let arr = new Uint8Array(await crypto.subtle.digest('SHA-1', new TextEncoder().encode(str)));
		for (let i=0; i < arr.length; i++) temp += arr.toString(36);
		return temp;
	}

	My.refreshLocalNodes = async function(){
		// This only available on development mode editor (as this have eval, it can be dangerous)
		if(sf.hotReload == null || location.pathname !== '/dev.html')
			return SmallNotif.add("Refresh local nodes feature only available on development mode editor");

		let localNodes = My.files[EditorWorkingDir.name].local_nodes;

		// Skip if not exist
		if(localNodes == null) return;
		let notif = SmallNotif.add("Rescanning local nodes...", "yellow", false);

		let cwd = await EditorWorkingDir.recursiveGetFileHandles('local_nodes', {}, My.directories);
		compareDir(localNodes, cwd, EditorWorkingDir.name + '/local_nodes');

		let count = 0;
		await isScriptChanged(localNodes, EditorWorkingDir.name);
		async function isScriptChanged(dir, path){
			// Prioritize name with underscore first
			let loadList = [];
			let prioritizeList = [];

			for (let key in dir) {
				let target = dir[key];

				if(target.constructor === Object){
					await isScriptChanged(target, path + '/' + key);
					continue;
				}

				// Only load file with .js extension
				if(!target.name.endsWith('.js') && !target.name.endsWith('.sf')) continue;
				if(target.name.startsWith('_')) prioritizeList.push(key);
				else loadList.push(key);
			}

			loadList.unshift(...prioritizeList);
			for (let i=0; i < loadList.length; i++) {
				let target = dir[loadList[i]];

				// is file
				let content = await target.readText();
				let hash = await hashString(content);

				// Skip if content was unchanged
				if(target._hash === hash) continue;
				target._hash = hash;

				// Parse .sf template file
				if(target.name.endsWith('.sf')){
					let temp = sf.parser.parseTemplate(content);
					sf.parser.load(path + '/' + target.name, temp);
					continue;
				}

				// Load node or .js script into the editor
				try{ eval(content); count++; } catch(e) {
					notif.change("Failed to load node from local_nodes", "red");
					throw e;
				}
			}
		}

		notif.change(count + " file was reloaded", "green");
		await new Promise(resolve => setTimeout(resolve, 200));
	}
});