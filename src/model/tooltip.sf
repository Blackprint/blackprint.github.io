## html.append-to-body
<!-- /src/model/tooltip.sf -->
<sf-m name="tooltip" class="{{ showed && 'show' }}" style="transform: translate({{ x }}px, {{ y }}px);">
	<div class="{{ type === 'basic' ? '' : 'hide-this' }} basic desc">{{ desc }}</div>
	<div class="{{ type === 'port' ? '' : 'hide-this' }} port">
		<div class="type">Type: <span style="color: {{ port.color }}">{{ port.type }}</span></div>
		<div class="feature" style="display: {{ port.feature ? '' : 'none' }}">Feature: <span>{{ port.feature }}</span></div>
		<div class="desc">{{ port.desc }}</div>
	</div>
	<div class="{{ type === 'node' ? '' : 'hide-this' }} node">
		<div class="path">Path: <span>{{ node.path }}</span></div>
		<div class="desc">{{ node.desc }}</div>
	</div>
</sf-m>

## scss-global
sf-m[name="tooltip"]{
	visibility: hidden;
	background: #000000da;
	pointer-events: none;
	padding: 2px 8px;
	border-radius: 5px;
	box-shadow: 0 0 2px white;
	position: fixed;
	top: 15px;
	left: 10px;
	color: #dbdbdb;
	opacity: 0;
	z-index: 1;
	transition: 0.3s ease-in opacity;

	.path{
		color: gray;
		font-size: 16px;
	}

	.type, .feature {
		color: gray;
		span{
			font-weight: bold;
			letter-spacing: 1px;
		}
	}

	.feature span{
		color: white;
	}

	.hide-this {
		display: none;
	}

	.desc{
		white-space: pre-wrap;
		// font-size: 14px;
	}

	&.show{
		visibility: visible;
		opacity: 1;
	}

	.icon{
		padding-right: 5px;
	}
}

## js-global
var ToolTip = sf.model('tooltip', function(My){
	My.showed = false;
	My.x = 0;
	My.y = 0;

	My.type = 'basic';
	My.desc = '';
	My.port = {type:'', desc:'', color:''};
	My.node = {path:'', desc:''};

	My._listener = function(ev){
		My.x = ev.clientX;
		My.y = ev.clientY;
	}

	My.set = function(data, ev, type='basic'){
		if(ev != null){
			My.x = ev.x;
			My.y = ev.y;
		}

		if(data && My.showed === false){
			My.showed = true;
			$(window).on('pointermove', My._listener);
		}
		else if(!data){
			My.showed = false;
			$(window).off('pointermove', My._listener);
		}

		My.type = type;

		if(!data) return;

		if(type === 'basic') My.desc = data;
		else if(type === 'node'){
			My.node.path = data.namespace;
			My.node.desc = data.docs?.description || '';
		}
		else if(type === 'port'){
			let typeName = data.type.name;
			let feature = '';
			if(typeName.includes('BP-Union')){
				typeName = typeName.replace(/BP\-.*? /g, '');
				typeName = `<${typeName.split(' ').join(' | ')}>`;
				feature = "Union";
			}
			else if(data.classAdd.includes('BP-StructOf')){
				typeName = `${typeName}{...}`;
				feature = "Structure";
			}
			else if(data.classAdd.includes('BP-StructSplit')){
				typeName = typeName.replace(/BP\-(Open|Last) /g, '');
				feature = "StructureAccess";
			}
			else {
				if(typeName.startsWith('BP-')){
					let temp = /(BP\-.*?) ?(.*)?/g.exec(typeName);
					if(temp == null){
						typeName = feature = typeName.replace('BP-', '');
					}
					else{
						typeName = temp[2];
						feature = temp[1].replace('BP-', '');
					}
				}
				else feature = data.classAdd;
			}

			if(data.virtualType != null){
				let vtype = data.virtualType?.map(v => v.name).join(' | ');
				typeName += (vtype ? ` as Virtual<${vtype}>` : '');
			}

			My.port.type = typeName;
			My.port.feature = feature;
			My.port.desc = data.docs?.description || '';

			let portElement = data.iface[data.source]._portList.getElement(data).querySelector('.port');
			let color = window.getComputedStyle(portElement).getPropertyValue('background-color');

			if(color === 'rgba(0, 0, 0, 0)') color = 'white';
			My.port.color = color;
		}
	}
});